
/* Copyright (c) 2011, Hua Huang and Robert D. Cameron.
   Licensed under the Academic Free License 3.0.
   This file is generated by the IDISA+ generator;
   modifications should be made only by changing the
   generator configuration and data files. */

#ifndef _IDISA_SSE4_2_C_H
#define _IDISA_SSE4_2_C_H
#include "smmintrin.h"

#include <stdint.h>
typedef __m128i bitblock128_t;

#define shufflemask4(s1, s2, s3, s4) \
	((s1<<6) | (s2<<4) | (s3<<2) | s4)

#define shufflemask4_from_shufflemask2(msk) \
	(msk==3 ? 238 : (msk==2 ? 228 : (msk==1 ? 78 : 68)))

#define shufflemask8_to_shufflemask4(msk) \
	((msk&3) | (((msk>>3)&3)<<2) | (((msk>>6)&3)<<4) | (((msk>>9)&3)<<6) | (((msk>>12)&3)<<8) | (((msk>>15)&3)<<10) | (((msk>>18)&3)<<12) | (((msk>>21)&3)<<14))

//Declaration Starts here
static inline bitblock128_t esimd_mergel_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t esimd_mergel_1(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t esimd_mergel_2(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t esimd_mergel_4(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t esimd_mergel_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t esimd_mergel_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t esimd_mergel_16(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t esimd_signextendh_32(bitblock128_t arg1);
static inline bitblock128_t esimd_signextendh_1(bitblock128_t arg1);
static inline bitblock128_t esimd_signextendh_2(bitblock128_t arg1);
static inline bitblock128_t esimd_signextendh_4(bitblock128_t arg1);
static inline bitblock128_t esimd_signextendh_8(bitblock128_t arg1);
static inline bitblock128_t esimd_signextendh_64(bitblock128_t arg1);
static inline bitblock128_t esimd_signextendh_16(bitblock128_t arg1);
static inline bitblock128_t simd_max_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_max_1(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_max_2(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_max_4(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_max_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_max_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_max_128(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_max_16(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t esimd_mergeh_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t esimd_mergeh_1(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t esimd_mergeh_2(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t esimd_mergeh_4(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t esimd_mergeh_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t esimd_mergeh_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t esimd_mergeh_16(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_mult_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_mult_1(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_mult_2(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_mult_4(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_mult_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_mult_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_mult_128(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_mult_16(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_umin_hl_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_umin_hl_2(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_umin_hl_4(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_umin_hl_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_umin_hl_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_umin_hl_128(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_umin_hl_16(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_nor(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_gt_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_gt_1(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_gt_2(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_gt_4(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_gt_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_gt_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_gt_128(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_gt_16(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_not(bitblock128_t arg1);
static inline bitblock128_t bitblock_sll(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_umult_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_umult_1(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_umult_2(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_umult_4(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_umult_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_umult_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_umult_16(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_add_hl_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_add_hl_2(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_add_hl_4(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_add_hl_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_add_hl_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_add_hl_128(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_add_hl_16(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_ult_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_ult_1(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_ult_2(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_ult_4(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_ult_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_ult_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_ult_128(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_ult_16(bitblock128_t arg1, bitblock128_t arg2);
//The total number of operations is 1.0
#define mvmd_shufflei_32(msk, arg1) \
	_mm_shuffle_epi32(arg1, (int32_t)(msk))

//The total number of operations is 1.0
#define mvmd_shufflei_64(msk, arg1) \
	mvmd_shufflei_32(shufflemask4_from_shufflemask2(msk), arg1)

//The total number of operations is 13.6666666667
#define mvmd_shufflei_16(msk, arg1) \
	simd_ifh_1(mvmd_fill8_16(((((msk>>21)&4) == 0) ? 0 : (131071)), ((((msk>>18)&4) == 0) ? 0 : (131071)), ((((msk>>15)&4) == 0) ? 0 : (131071)), ((((msk>>12)&4) == 0) ? 0 : (131071)), ((((msk>>9)&4) == 0) ? (131071) : 0), ((((msk>>6)&4) == 0) ? (131071) : 0), ((((msk>>3)&4) == 0) ? (131071) : 0), (((msk&4) == 0) ? (131071) : 0)), _mm_shufflelo_epi16(_mm_shufflehi_epi16(arg1, (int32_t)((shufflemask8_to_shufflemask4(msk)>>8))), (int32_t)((shufflemask8_to_shufflemask4(msk)&255))), simd_or(_mm_shufflehi_epi16(simd_slli_128(64, arg1), (int32_t)((shufflemask8_to_shufflemask4(msk)>>8))), _mm_shufflelo_epi16(simd_srli_128(64, arg1), (int32_t)((shufflemask8_to_shufflemask4(msk)&255)))))

//The total number of operations is 1.0
#define simd_srli_32(sh, arg1) \
	_mm_srli_epi32(arg1, (int32_t)(sh))

//The total number of operations is 2.0
#define simd_srli_2(sh, arg1) \
	simd_and(simd_srli_32(sh, arg1), simd_constant_2(((3)>>sh)))

//The total number of operations is 2.0
#define simd_srli_4(sh, arg1) \
	simd_and(simd_srli_32(sh, arg1), simd_constant_4(((15)>>sh)))

//The total number of operations is 2.0
#define simd_srli_8(sh, arg1) \
	simd_and(simd_srli_32(sh, arg1), simd_constant_8(((255)>>sh)))

//The total number of operations is 1.0
#define simd_srli_64(sh, arg1) \
	_mm_srli_epi64(arg1, (int32_t)(sh))

//The total number of operations is 2.33333333333
#define simd_srli_128(sh, arg1) \
	(((sh%8) == 0) ? _mm_srli_si128(arg1, (int32_t)((sh/8))) : ((sh >= 64) ? simd_srli_64((sh&63), _mm_srli_si128(arg1, (int32_t)(8))) : simd_or(simd_srli_64(sh, arg1), _mm_srli_si128(simd_slli_64(((128-sh)&63), arg1), (int32_t)(8)))))

//The total number of operations is 1.0
#define simd_srli_16(sh, arg1) \
	_mm_srli_epi16(arg1, (int32_t)(sh))

static inline bitblock128_t bitblock_load_unaligned(const bitblock128_t* arg1);
//The total number of operations is 3.0
#define mvmd_dsrli_32(sh, arg1, arg2) \
	simd_or(mvmd_srli_32(sh, arg1), mvmd_slli_32(((4)-sh), arg2))

//The total number of operations is 5.66666666667
#define mvmd_dsrli_2(sh, arg1, arg2) \
	simd_or(mvmd_srli_2(sh, arg1), mvmd_slli_2(((64)-sh), arg2))

//The total number of operations is 5.66666666667
#define mvmd_dsrli_4(sh, arg1, arg2) \
	simd_or(mvmd_srli_4(sh, arg1), mvmd_slli_4(((32)-sh), arg2))

//The total number of operations is 3.0
#define mvmd_dsrli_8(sh, arg1, arg2) \
	simd_or(mvmd_srli_8(sh, arg1), mvmd_slli_8(((16)-sh), arg2))

//The total number of operations is 3.0
#define mvmd_dsrli_64(sh, arg1, arg2) \
	simd_or(mvmd_srli_64(sh, arg1), mvmd_slli_64(((2)-sh), arg2))

//The total number of operations is 3.0
#define mvmd_dsrli_128(sh, arg1, arg2) \
	simd_or(mvmd_srli_128(sh, arg1), mvmd_slli_128(((1)-sh), arg2))

//The total number of operations is 3.0
#define mvmd_dsrli_16(sh, arg1, arg2) \
	simd_or(mvmd_srli_16(sh, arg1), mvmd_slli_16(((8)-sh), arg2))

//The total number of operations is 2.33333333333
#define bitblock_srli(sh, arg1) \
	simd_srli_128(sh, arg1)

static inline bitblock128_t simd_ctz_32(bitblock128_t arg1);
static inline bitblock128_t simd_ctz_1(bitblock128_t arg1);
static inline bitblock128_t simd_ctz_2(bitblock128_t arg1);
static inline bitblock128_t simd_ctz_4(bitblock128_t arg1);
static inline bitblock128_t simd_ctz_8(bitblock128_t arg1);
static inline bitblock128_t simd_ctz_64(bitblock128_t arg1);
static inline bitblock128_t simd_ctz_128(bitblock128_t arg1);
static inline bitblock128_t simd_ctz_16(bitblock128_t arg1);
static inline bitblock128_t simd_sll_64(bitblock128_t arg1, bitblock128_t shift_mask);
static inline bitblock128_t simd_sll_128(bitblock128_t arg1, bitblock128_t shift_mask);
static inline bitblock128_t mvmd_fill_32(uint64_t val1);
static inline bitblock128_t mvmd_fill_1(uint64_t val1);
static inline bitblock128_t mvmd_fill_2(uint64_t val1);
static inline bitblock128_t mvmd_fill_4(uint64_t val1);
static inline bitblock128_t mvmd_fill_8(uint64_t val1);
static inline bitblock128_t mvmd_fill_64(uint64_t val1);
static inline bitblock128_t mvmd_fill_128(uint64_t val1);
static inline bitblock128_t mvmd_fill_16(uint64_t val1);
static inline bitblock128_t mvmd_shuffle_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t mvmd_shuffle_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t mvmd_shuffle_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t mvmd_shuffle_16(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packss_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packss_2(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packss_4(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packss_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packss_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packss_128(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packss_16(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t bitblock_srl(bitblock128_t arg1, bitblock128_t arg2);
static inline void bitblock_store_aligned(bitblock128_t arg1, bitblock128_t* arg2);
static inline bitblock128_t simd_eq_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_eq_1(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_eq_2(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_eq_4(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_eq_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_eq_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_eq_128(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_eq_16(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_popcount_32(bitblock128_t arg1);
static inline bitblock128_t simd_popcount_1(bitblock128_t arg1);
static inline bitblock128_t simd_popcount_2(bitblock128_t arg1);
static inline bitblock128_t simd_popcount_4(bitblock128_t arg1);
static inline bitblock128_t simd_popcount_8(bitblock128_t arg1);
static inline bitblock128_t simd_popcount_64(bitblock128_t arg1);
static inline bitblock128_t simd_popcount_128(bitblock128_t arg1);
static inline bitblock128_t simd_popcount_16(bitblock128_t arg1);
static inline bitblock128_t simd_andc(bitblock128_t arg1, bitblock128_t arg2);
//The total number of operations is 1.0
#define mvmd_extract_32(pos, arg1) \
	(((uint64_t)(((4294967296ULL)-1)))&_mm_extract_epi32(arg1, (int32_t)(pos)))

//The total number of operations is 1.0
#define mvmd_extract_1(pos, arg1) \
	(((pos%2) == 0) ? (mvmd_extract_2((pos/2), arg1)&(1)) : (mvmd_extract_2((pos/2), arg1)>>1))

//The total number of operations is 1.0
#define mvmd_extract_2(pos, arg1) \
	(((pos%2) == 0) ? (mvmd_extract_4((pos/2), arg1)&(3)) : (mvmd_extract_4((pos/2), arg1)>>2))

//The total number of operations is 1.0
#define mvmd_extract_4(pos, arg1) \
	(((pos%2) == 0) ? (mvmd_extract_8((pos/2), arg1)&(15)) : (mvmd_extract_8((pos/2), arg1)>>4))

//The total number of operations is 1.0
#define mvmd_extract_8(pos, arg1) \
	(((pos%2) == 0) ? (mvmd_extract_16((pos/2), arg1)&(255)) : (mvmd_extract_16((pos/2), arg1)>>8))

//The total number of operations is 2.0
#define mvmd_extract_64(pos, arg1) \
	((((uint64_t)(mvmd_extract_32(((2*pos)+1), arg1)))<<(32))|mvmd_extract_32((2*pos), arg1))

//The total number of operations is 1.0
#define mvmd_extract_16(pos, arg1) \
	(65535&_mm_extract_epi16(arg1, (int32_t)(pos)))

static inline bitblock128_t simd_neg_32(bitblock128_t arg1);
static inline bitblock128_t simd_neg_2(bitblock128_t arg1);
static inline bitblock128_t simd_neg_4(bitblock128_t arg1);
static inline bitblock128_t simd_neg_8(bitblock128_t arg1);
static inline bitblock128_t simd_neg_64(bitblock128_t arg1);
static inline bitblock128_t simd_neg_128(bitblock128_t arg1);
static inline bitblock128_t simd_neg_16(bitblock128_t arg1);
//The total number of operations is 1.0
#define mvmd_splat_32(pos, arg1) \
	mvmd_shufflei_32(shufflemask4(pos, pos, pos, pos), arg1)

//The total number of operations is 12.6666666667
#define mvmd_splat_1(pos, arg1) \
	simd_sub_128(simd_constant_128(0), simd_and(simd_constant_128(1), simd_srli_128(pos, arg1)))

//The total number of operations is 10.0
#define mvmd_splat_2(pos, arg1) \
	mvmd_splat_4((pos/2), simd_or((((pos%2) == 0) ? simd_slli_4(2, arg1) : simd_srli_4(2, arg1)), (((pos%2) == 0) ? simd_and(simd_lomask_4(), arg1) : simd_and(simd_himask_4(), arg1))))

//The total number of operations is 6.0
#define mvmd_splat_4(pos, arg1) \
	mvmd_splat_8((pos/2), simd_or((((pos%2) == 0) ? simd_slli_8(4, arg1) : simd_srli_8(4, arg1)), (((pos%2) == 0) ? simd_and(simd_lomask_8(), arg1) : simd_and(simd_himask_8(), arg1))))

//The total number of operations is 2.0
#define mvmd_splat_8(pos, arg1) \
	mvmd_fill_8(_mm_extract_epi8(arg1, (int32_t)(pos)))

//The total number of operations is 5.0
#define mvmd_splat_64(pos, arg1) \
	simd_ifh_1(simd_himask_64(), mvmd_splat_32(((2*pos)+1), arg1), mvmd_splat_32((2*pos), arg1))

//The total number of operations is 13.0
#define mvmd_splat_128(pos, arg1) \
	simd_ifh_1(simd_himask_128(), mvmd_splat_64(((2*pos)+1), arg1), mvmd_splat_64((2*pos), arg1))

//The total number of operations is 2.0
#define mvmd_splat_16(pos, arg1) \
	mvmd_fill_16(_mm_extract_epi16(arg1, (int32_t)(pos)))

static inline bitblock128_t hsimd_packh_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packh_2(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packh_4(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packh_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packh_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packh_128(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packh_16(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_himask_32();
static inline bitblock128_t simd_himask_2();
static inline bitblock128_t simd_himask_4();
static inline bitblock128_t simd_himask_8();
static inline bitblock128_t simd_himask_64();
static inline bitblock128_t simd_himask_128();
static inline bitblock128_t simd_himask_16();
//The total number of operations is 1.0
#define simd_slli_32(sh, arg1) \
	_mm_slli_epi32(arg1, (int32_t)(sh))

//The total number of operations is 2.0
#define simd_slli_2(sh, arg1) \
	simd_and(simd_slli_32(sh, arg1), simd_constant_2((((3)<<sh)&(3))))

//The total number of operations is 2.0
#define simd_slli_4(sh, arg1) \
	simd_and(simd_slli_32(sh, arg1), simd_constant_4((((15)<<sh)&(15))))

//The total number of operations is 2.0
#define simd_slli_8(sh, arg1) \
	simd_and(simd_slli_32(sh, arg1), simd_constant_8((((255)<<sh)&(255))))

//The total number of operations is 1.0
#define simd_slli_64(sh, arg1) \
	_mm_slli_epi64(arg1, (int32_t)(sh))

//The total number of operations is 2.33333333333
#define simd_slli_128(sh, arg1) \
	(((sh%8) == 0) ? _mm_slli_si128(arg1, (int32_t)((sh/8))) : ((sh >= 64) ? simd_slli_64((sh&63), _mm_slli_si128(arg1, (int32_t)(8))) : simd_or(simd_slli_64(sh, arg1), _mm_slli_si128(simd_srli_64(((128-sh)&63), arg1), (int32_t)(8)))))

//The total number of operations is 1.0
#define simd_slli_16(sh, arg1) \
	_mm_slli_epi16(arg1, (int32_t)(sh))

static inline bool bitblock_all(bitblock128_t arg1);
static inline bitblock128_t simd_ifh_32(bitblock128_t arg1, bitblock128_t arg2, bitblock128_t arg3);
static inline bitblock128_t simd_ifh_1(bitblock128_t arg1, bitblock128_t arg2, bitblock128_t arg3);
static inline bitblock128_t simd_ifh_2(bitblock128_t arg1, bitblock128_t arg2, bitblock128_t arg3);
static inline bitblock128_t simd_ifh_4(bitblock128_t arg1, bitblock128_t arg2, bitblock128_t arg3);
static inline bitblock128_t simd_ifh_8(bitblock128_t arg1, bitblock128_t arg2, bitblock128_t arg3);
static inline bitblock128_t simd_ifh_64(bitblock128_t arg1, bitblock128_t arg2, bitblock128_t arg3);
static inline bitblock128_t simd_ifh_128(bitblock128_t arg1, bitblock128_t arg2, bitblock128_t arg3);
static inline bitblock128_t simd_ifh_16(bitblock128_t arg1, bitblock128_t arg2, bitblock128_t arg3);
static inline bitblock128_t simd_sub_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_sub_1(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_sub_2(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_sub_4(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_sub_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_sub_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_sub_128(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_sub_16(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_add_hl_32(bitblock128_t arg1);
static inline bitblock128_t simd_add_hl_2(bitblock128_t arg1);
static inline bitblock128_t simd_add_hl_4(bitblock128_t arg1);
static inline bitblock128_t simd_add_hl_8(bitblock128_t arg1);
static inline bitblock128_t simd_add_hl_64(bitblock128_t arg1);
static inline bitblock128_t simd_add_hl_128(bitblock128_t arg1);
static inline bitblock128_t simd_add_hl_16(bitblock128_t arg1);
static inline bitblock128_t simd_srl_64(bitblock128_t arg1, bitblock128_t shift_mask);
static inline bitblock128_t simd_srl_128(bitblock128_t arg1, bitblock128_t shift_mask);
//The total number of operations is 1.0
#define mvmd_slli_32(sh, arg1) \
	mvmd_slli_16((sh*2), arg1)

//The total number of operations is 2.33333333333
#define mvmd_slli_2(sh, arg1) \
	simd_slli_128((sh*2), arg1)

//The total number of operations is 2.33333333333
#define mvmd_slli_4(sh, arg1) \
	mvmd_slli_2((sh*2), arg1)

//The total number of operations is 1.0
#define mvmd_slli_8(sh, arg1) \
	_mm_slli_si128(arg1, (int32_t)(sh))

//The total number of operations is 1.0
#define mvmd_slli_64(sh, arg1) \
	mvmd_slli_32((sh*2), arg1)

//The total number of operations is 1.0
#define mvmd_slli_128(sh, arg1) \
	mvmd_slli_64((sh*2), arg1)

//The total number of operations is 1.0
#define mvmd_slli_16(sh, arg1) \
	mvmd_slli_8((sh*2), arg1)

static inline bitblock128_t simd_lomask_32();
static inline bitblock128_t simd_lomask_2();
static inline bitblock128_t simd_lomask_4();
static inline bitblock128_t simd_lomask_8();
static inline bitblock128_t simd_lomask_64();
static inline bitblock128_t simd_lomask_128();
static inline bitblock128_t simd_lomask_16();
static inline uint64_t hsimd_signmask_32(bitblock128_t arg1);
static inline uint64_t hsimd_signmask_4(bitblock128_t arg1);
static inline uint64_t hsimd_signmask_8(bitblock128_t arg1);
static inline uint64_t hsimd_signmask_64(bitblock128_t arg1);
static inline uint64_t hsimd_signmask_128(bitblock128_t arg1);
static inline uint64_t hsimd_signmask_16(bitblock128_t arg1);
static inline bitblock128_t esimd_zeroextendh_32(bitblock128_t arg1);
static inline bitblock128_t esimd_zeroextendh_1(bitblock128_t arg1);
static inline bitblock128_t esimd_zeroextendh_2(bitblock128_t arg1);
static inline bitblock128_t esimd_zeroextendh_4(bitblock128_t arg1);
static inline bitblock128_t esimd_zeroextendh_8(bitblock128_t arg1);
static inline bitblock128_t esimd_zeroextendh_64(bitblock128_t arg1);
static inline bitblock128_t esimd_zeroextendh_16(bitblock128_t arg1);
static inline bitblock128_t esimd_zeroextendl_32(bitblock128_t arg1);
static inline bitblock128_t esimd_zeroextendl_1(bitblock128_t arg1);
static inline bitblock128_t esimd_zeroextendl_2(bitblock128_t arg1);
static inline bitblock128_t esimd_zeroextendl_4(bitblock128_t arg1);
static inline bitblock128_t esimd_zeroextendl_8(bitblock128_t arg1);
static inline bitblock128_t esimd_zeroextendl_64(bitblock128_t arg1);
static inline bitblock128_t esimd_zeroextendl_16(bitblock128_t arg1);
static inline bitblock128_t mvmd_fill4_32(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4);
static inline bitblock128_t mvmd_fill4_1(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4);
static inline bitblock128_t mvmd_fill4_2(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4);
static inline bitblock128_t mvmd_fill4_4(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4);
static inline bitblock128_t mvmd_fill4_8(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4);
static inline bitblock128_t mvmd_fill4_16(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4);
static inline bitblock128_t simd_umin_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_umin_1(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_umin_2(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_umin_4(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_umin_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_umin_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_umin_128(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_umin_16(bitblock128_t arg1, bitblock128_t arg2);
//The total number of operations is 1.0
#define mvmd_srli_32(sh, arg1) \
	mvmd_srli_16((sh*2), arg1)

//The total number of operations is 2.33333333333
#define mvmd_srli_2(sh, arg1) \
	simd_srli_128((sh*2), arg1)

//The total number of operations is 2.33333333333
#define mvmd_srli_4(sh, arg1) \
	simd_srli_128((sh*4), arg1)

//The total number of operations is 1.0
#define mvmd_srli_8(sh, arg1) \
	_mm_srli_si128(arg1, (int32_t)(sh))

//The total number of operations is 1.0
#define mvmd_srli_64(sh, arg1) \
	mvmd_srli_32((sh*2), arg1)

//The total number of operations is 1.0
#define mvmd_srli_128(sh, arg1) \
	mvmd_srli_64((sh*2), arg1)

//The total number of operations is 1.0
#define mvmd_srli_16(sh, arg1) \
	mvmd_srli_8((sh*2), arg1)

//The total number of operations is 0
#define simd_constant_32(val) \
	_mm_set1_epi32((int32_t)(val))

//The total number of operations is 0
#define simd_constant_1(val) \
	simd_constant_32((-1*val))

//The total number of operations is 0
#define simd_constant_2(val) \
	((val < 0) ? simd_constant_4(((val<<2)|(val^(-4)))) : simd_constant_4(((val<<2)|val)))

//The total number of operations is 0
#define simd_constant_4(val) \
	((val < 0) ? simd_constant_8(((val<<4)|(val^(-16)))) : simd_constant_8(((val<<4)|val)))

//The total number of operations is 0
#define simd_constant_8(val) \
	_mm_set1_epi8((int32_t)(val))

//The total number of operations is 0
#define simd_constant_64(val) \
	_mm_set_epi32((int32_t)((val>>32)), (int32_t)(val), (int32_t)((val>>32)), (int32_t)(val))

//The total number of operations is 0
#define simd_constant_128(val) \
	_mm_set_epi32((int32_t)(0), (int32_t)(0), (int32_t)((val>>32)), (int32_t)(val))

//The total number of operations is 0
#define simd_constant_16(val) \
	_mm_set1_epi16((int32_t)(val))

static inline bitblock128_t simd_min_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_min_1(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_min_2(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_min_4(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_min_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_min_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_min_128(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_min_16(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t mvmd_fill2_32(uint64_t val1, uint64_t val2);
static inline bitblock128_t mvmd_fill2_1(uint64_t val1, uint64_t val2);
static inline bitblock128_t mvmd_fill2_2(uint64_t val1, uint64_t val2);
static inline bitblock128_t mvmd_fill2_4(uint64_t val1, uint64_t val2);
static inline bitblock128_t mvmd_fill2_8(uint64_t val1, uint64_t val2);
static inline bitblock128_t mvmd_fill2_64(uint64_t val1, uint64_t val2);
static inline bitblock128_t mvmd_fill2_16(uint64_t val1, uint64_t val2);
static inline bool bitblock_any(bitblock128_t arg1);
static inline uint64_t bitblock_popcount(bitblock128_t arg1);
//The total number of operations is 2.33333333333
#define bitblock_slli(sh, arg1) \
	simd_slli_128(sh, arg1)

static inline bitblock128_t simd_or(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packl_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packl_2(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packl_4(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packl_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packl_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packl_128(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packl_16(bitblock128_t arg1, bitblock128_t arg2);
//The total number of operations is 3.0
#define mvmd_dslli_32(sh, arg1, arg2) \
	simd_or(mvmd_slli_32(sh, arg1), mvmd_srli_32(((4)-sh), arg2))

//The total number of operations is 5.66666666667
#define mvmd_dslli_2(sh, arg1, arg2) \
	simd_or(mvmd_slli_2(sh, arg1), mvmd_srli_2(((64)-sh), arg2))

//The total number of operations is 5.66666666667
#define mvmd_dslli_4(sh, arg1, arg2) \
	simd_or(mvmd_slli_4(sh, arg1), mvmd_srli_4(((32)-sh), arg2))

//The total number of operations is 3.0
#define mvmd_dslli_8(sh, arg1, arg2) \
	simd_or(mvmd_slli_8(sh, arg1), mvmd_srli_8(((16)-sh), arg2))

//The total number of operations is 3.0
#define mvmd_dslli_64(sh, arg1, arg2) \
	simd_or(mvmd_slli_64(sh, arg1), mvmd_srli_64(((2)-sh), arg2))

//The total number of operations is 3.0
#define mvmd_dslli_128(sh, arg1, arg2) \
	simd_or(mvmd_slli_128(sh, arg1), mvmd_srli_128(((1)-sh), arg2))

//The total number of operations is 3.0
#define mvmd_dslli_16(sh, arg1, arg2) \
	simd_or(mvmd_slli_16(sh, arg1), mvmd_srli_16(((8)-sh), arg2))

static inline bitblock128_t mvmd_fill8_1(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4, uint64_t val5, uint64_t val6, uint64_t val7, uint64_t val8);
static inline bitblock128_t mvmd_fill8_2(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4, uint64_t val5, uint64_t val6, uint64_t val7, uint64_t val8);
static inline bitblock128_t mvmd_fill8_4(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4, uint64_t val5, uint64_t val6, uint64_t val7, uint64_t val8);
static inline bitblock128_t mvmd_fill8_8(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4, uint64_t val5, uint64_t val6, uint64_t val7, uint64_t val8);
static inline bitblock128_t mvmd_fill8_16(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4, uint64_t val5, uint64_t val6, uint64_t val7, uint64_t val8);
static inline bitblock128_t hsimd_min_hl_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_min_hl_2(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_min_hl_4(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_min_hl_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_min_hl_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_min_hl_128(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_min_hl_16(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_xor(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_umax_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_umax_1(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_umax_2(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_umax_4(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_umax_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_umax_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_umax_128(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_umax_16(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t bitblock_load_aligned(const bitblock128_t* arg1);
static inline void bitblock_store_unaligned(bitblock128_t arg1, bitblock128_t* arg2);
static inline bitblock128_t esimd_signextendl_32(bitblock128_t arg1);
static inline bitblock128_t esimd_signextendl_1(bitblock128_t arg1);
static inline bitblock128_t esimd_signextendl_2(bitblock128_t arg1);
static inline bitblock128_t esimd_signextendl_4(bitblock128_t arg1);
static inline bitblock128_t esimd_signextendl_8(bitblock128_t arg1);
static inline bitblock128_t esimd_signextendl_64(bitblock128_t arg1);
static inline bitblock128_t esimd_signextendl_16(bitblock128_t arg1);
static inline bitblock128_t hsimd_packus_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packus_2(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packus_4(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packus_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packus_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packus_128(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t hsimd_packus_16(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_abs_32(bitblock128_t arg1);
static inline bitblock128_t simd_abs_2(bitblock128_t arg1);
static inline bitblock128_t simd_abs_4(bitblock128_t arg1);
static inline bitblock128_t simd_abs_8(bitblock128_t arg1);
static inline bitblock128_t simd_abs_64(bitblock128_t arg1);
static inline bitblock128_t simd_abs_128(bitblock128_t arg1);
static inline bitblock128_t simd_abs_16(bitblock128_t arg1);
static inline bitblock128_t simd_xor_hl_32(bitblock128_t arg1);
static inline bitblock128_t simd_xor_hl_2(bitblock128_t arg1);
static inline bitblock128_t simd_xor_hl_4(bitblock128_t arg1);
static inline bitblock128_t simd_xor_hl_8(bitblock128_t arg1);
static inline bitblock128_t simd_xor_hl_64(bitblock128_t arg1);
static inline bitblock128_t simd_xor_hl_128(bitblock128_t arg1);
static inline bitblock128_t simd_xor_hl_16(bitblock128_t arg1);
//The total number of operations is 1.0
#define simd_srai_32(sh, arg1) \
	_mm_srai_epi32(arg1, (int32_t)(sh))

//The total number of operations is 4.0
#define simd_srai_2(sh, arg1) \
	((sh == 0) ? arg1 : simd_or(simd_and(simd_himask_2(), arg1), simd_srli_2(1, arg1)))

static inline bitblock128_t simd_srai_4(uint64_t sh, bitblock128_t arg1);
static inline bitblock128_t simd_srai_8(uint64_t sh, bitblock128_t arg1);
//The total number of operations is 4.5
#define simd_srai_64(sh, arg1) \
	simd_or(simd_and(simd_himask_64(), simd_srai_32(((sh < (32)) ? sh : (32)), arg1)), ((sh <= (32)) ? simd_srli_64(sh, arg1) : simd_srai_32((sh-(32)), simd_srli_64((32), arg1))))

//The total number of operations is 11.0833333333
#define simd_srai_128(sh, arg1) \
	simd_or(simd_and(simd_himask_128(), simd_srai_64(((sh < (64)) ? sh : (64)), arg1)), ((sh <= (64)) ? simd_srli_128(sh, arg1) : simd_srai_64((sh-(64)), simd_srli_128((64), arg1))))

//The total number of operations is 1.0
#define simd_srai_16(sh, arg1) \
	_mm_srai_epi16(arg1, (int32_t)(sh))

static inline bitblock128_t simd_and(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t mvmd_fill16_1(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4, uint64_t val5, uint64_t val6, uint64_t val7, uint64_t val8, uint64_t val9, uint64_t val10, uint64_t val11, uint64_t val12, uint64_t val13, uint64_t val14, uint64_t val15, uint64_t val16);
static inline bitblock128_t mvmd_fill16_2(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4, uint64_t val5, uint64_t val6, uint64_t val7, uint64_t val8, uint64_t val9, uint64_t val10, uint64_t val11, uint64_t val12, uint64_t val13, uint64_t val14, uint64_t val15, uint64_t val16);
static inline bitblock128_t mvmd_fill16_4(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4, uint64_t val5, uint64_t val6, uint64_t val7, uint64_t val8, uint64_t val9, uint64_t val10, uint64_t val11, uint64_t val12, uint64_t val13, uint64_t val14, uint64_t val15, uint64_t val16);
static inline bitblock128_t mvmd_fill16_8(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4, uint64_t val5, uint64_t val6, uint64_t val7, uint64_t val8, uint64_t val9, uint64_t val10, uint64_t val11, uint64_t val12, uint64_t val13, uint64_t val14, uint64_t val15, uint64_t val16);
static inline bitblock128_t simd_lt_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_lt_1(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_lt_2(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_lt_4(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_lt_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_lt_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_lt_128(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_lt_16(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_add_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_add_1(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_add_2(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_add_4(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_add_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_add_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_add_128(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_add_16(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_ugt_32(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_ugt_1(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_ugt_2(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_ugt_4(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_ugt_8(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_ugt_64(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_ugt_128(bitblock128_t arg1, bitblock128_t arg2);
static inline bitblock128_t simd_ugt_16(bitblock128_t arg1, bitblock128_t arg2);

//Implementation Starts here
//The total number of operations is 1.0
static inline bitblock128_t esimd_mergel_32(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_unpacklo_epi32(arg2, arg1);
}
//The total number of operations is 31.0
static inline bitblock128_t esimd_mergel_1(bitblock128_t arg1, bitblock128_t arg2)
{
	return esimd_mergel_2(simd_ifh_1(simd_himask_2(), arg1, simd_srli_2(1, arg2)), simd_ifh_1(simd_himask_2(), simd_slli_2(1, arg1), arg2));
}
//The total number of operations is 21.0
static inline bitblock128_t esimd_mergel_2(bitblock128_t arg1, bitblock128_t arg2)
{
	return esimd_mergel_4(simd_ifh_1(simd_himask_4(), arg1, simd_srli_4(2, arg2)), simd_ifh_1(simd_himask_4(), simd_slli_4(2, arg1), arg2));
}
//The total number of operations is 11.0
static inline bitblock128_t esimd_mergel_4(bitblock128_t arg1, bitblock128_t arg2)
{
	return esimd_mergel_8(simd_ifh_1(simd_himask_8(), arg1, simd_srli_8(4, arg2)), simd_ifh_1(simd_himask_8(), simd_slli_8(4, arg1), arg2));
}
//The total number of operations is 1.0
static inline bitblock128_t esimd_mergel_8(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_unpacklo_epi8(arg2, arg1);
}
//The total number of operations is 1.0
static inline bitblock128_t esimd_mergel_64(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_unpacklo_epi64(arg2, arg1);
}
//The total number of operations is 1.0
static inline bitblock128_t esimd_mergel_16(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_unpacklo_epi16(arg2, arg1);
}
//The total number of operations is 3.33333333333
static inline bitblock128_t esimd_signextendh_32(bitblock128_t arg1)
{
	return esimd_signextendl_32(simd_srli_128((64), arg1));
}
//The total number of operations is 31.0
static inline bitblock128_t esimd_signextendh_1(bitblock128_t arg1)
{
	return esimd_mergeh_2(simd_srai_2(1, arg1), simd_srai_2(1, simd_slli_2(1, arg1)));
}
//The total number of operations is 33.0
static inline bitblock128_t esimd_signextendh_2(bitblock128_t arg1)
{
	return esimd_mergeh_4(simd_srai_4(2, arg1), simd_srai_4(2, simd_slli_4(2, arg1)));
}
//The total number of operations is 13.0
static inline bitblock128_t esimd_signextendh_4(bitblock128_t arg1)
{
	return esimd_mergeh_8(simd_srai_8(4, arg1), simd_srai_8(4, simd_slli_8(4, arg1)));
}
//The total number of operations is 3.33333333333
static inline bitblock128_t esimd_signextendh_8(bitblock128_t arg1)
{
	return esimd_signextendl_8(simd_srli_128((64), arg1));
}
//The total number of operations is 11.0833333333
static inline bitblock128_t esimd_signextendh_64(bitblock128_t arg1)
{
	return simd_srai_128(64, arg1);
}
//The total number of operations is 3.33333333333
static inline bitblock128_t esimd_signextendh_16(bitblock128_t arg1)
{
	return esimd_signextendl_16(simd_srli_128((64), arg1));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_max_32(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_max_epi32(arg1, arg2);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_max_1(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_and(arg1, arg2);
}
//The total number of operations is 15.6666666667
static inline bitblock128_t simd_max_2(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_ifh_1(simd_himask_2(), simd_and(arg1, arg2), simd_or(simd_and(arg2, simd_srli_128(1, simd_or(arg1, simd_not(arg2)))), simd_and(arg1, simd_srli_128(1, simd_or(simd_not(arg1), arg2)))));
}
//The total number of operations is 9.0
static inline bitblock128_t simd_max_4(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t high_bit = simd_constant_4((8));
	return simd_xor(simd_umax_4(simd_xor(arg1, high_bit), simd_xor(arg2, high_bit)), high_bit);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_max_8(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_max_epi8(arg1, arg2);
}
//The total number of operations is 4.0
static inline bitblock128_t simd_max_64(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_ifh_1(simd_gt_64(arg1, arg2), arg1, arg2);
}
//The total number of operations is 26.6666666667
static inline bitblock128_t simd_max_128(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t hiAns = simd_max_64(arg1, arg2);
	bitblock128_t loAns = simd_umax_64(arg1, arg2);
	bitblock128_t eqMask1 = simd_srli_128((64), simd_eq_64(hiAns, arg1));
	bitblock128_t eqMask2 = simd_srli_128((64), simd_eq_64(hiAns, arg2));
	return simd_ifh_1(simd_himask_128(), hiAns, simd_ifh_1(eqMask1, simd_ifh_1(eqMask2, loAns, arg1), arg2));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_max_16(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_max_epi16(arg1, arg2);
}
//The total number of operations is 1.0
static inline bitblock128_t esimd_mergeh_32(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_unpackhi_epi32(arg2, arg1);
}
//The total number of operations is 31.0
static inline bitblock128_t esimd_mergeh_1(bitblock128_t arg1, bitblock128_t arg2)
{
	return esimd_mergeh_2(simd_ifh_1(simd_himask_2(), arg1, simd_srli_2(1, arg2)), simd_ifh_1(simd_himask_2(), simd_slli_2(1, arg1), arg2));
}
//The total number of operations is 21.0
static inline bitblock128_t esimd_mergeh_2(bitblock128_t arg1, bitblock128_t arg2)
{
	return esimd_mergeh_4(simd_ifh_1(simd_himask_4(), arg1, simd_srli_4(2, arg2)), simd_ifh_1(simd_himask_4(), simd_slli_4(2, arg1), arg2));
}
//The total number of operations is 11.0
static inline bitblock128_t esimd_mergeh_4(bitblock128_t arg1, bitblock128_t arg2)
{
	return esimd_mergeh_8(simd_ifh_1(simd_himask_8(), arg1, simd_srli_8(4, arg2)), simd_ifh_1(simd_himask_8(), simd_slli_8(4, arg1), arg2));
}
//The total number of operations is 1.0
static inline bitblock128_t esimd_mergeh_8(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_unpackhi_epi8(arg2, arg1);
}
//The total number of operations is 1.0
static inline bitblock128_t esimd_mergeh_64(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_unpackhi_epi64(arg2, arg1);
}
//The total number of operations is 1.0
static inline bitblock128_t esimd_mergeh_16(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_unpackhi_epi16(arg2, arg1);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_mult_32(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_mullo_epi32(arg1, arg2);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_mult_1(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_and(arg1, arg2);
}
//The total number of operations is 19.6666666667
static inline bitblock128_t simd_mult_2(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t tmp1 = simd_slli_128(1, arg1);
	bitblock128_t tmp2 = simd_slli_128(1, arg2);
	return simd_ifh_1(simd_himask_2(), simd_or(simd_and(tmp1, simd_and(arg2, simd_or(simd_not(arg1), simd_not(tmp2)))), simd_and(arg1, simd_and(tmp2, simd_or(simd_not(tmp1), simd_not(arg2))))), simd_and(arg1, arg2));
}
//The total number of operations is 31.0
static inline bitblock128_t simd_mult_4(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t loMask = simd_lomask_8();
	bitblock128_t tmpAns1 = simd_mult_8(simd_and(loMask, arg1), simd_and(loMask, arg2));
	bitblock128_t tmpAns2 = simd_mult_8(simd_srli_8(4, arg1), simd_srli_8(4, arg2));
	return simd_ifh_1(loMask, tmpAns1, simd_slli_8(4, tmpAns2));
}
//The total number of operations is 10.0
static inline bitblock128_t simd_mult_8(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t loMask = simd_lomask_16();
	bitblock128_t tmpAns1 = simd_mult_16(simd_and(loMask, arg1), simd_and(loMask, arg2));
	bitblock128_t tmpAns2 = simd_mult_16(simd_srli_16(8, arg1), simd_srli_16(8, arg2));
	return simd_ifh_1(loMask, tmpAns1, simd_slli_16(8, tmpAns2));
}
//The total number of operations is 11.0
static inline bitblock128_t simd_mult_64(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t loMask = simd_lomask_64();
	bitblock128_t arg1_low = simd_and(arg1, loMask);
	bitblock128_t arg1_high = simd_srli_64((32), arg1);
	bitblock128_t arg2_low = simd_and(arg2, loMask);
	bitblock128_t arg2_high = simd_srli_64((32), arg2);
	bitblock128_t tmpAns1 = simd_umult_32(arg1_low, arg2_low);
	bitblock128_t tmpAns2 = simd_slli_64((32), simd_umult_32(arg1_low, arg2_high));
	bitblock128_t tmpAns3 = simd_slli_64((32), simd_umult_32(arg1_high, arg2_low));
	return simd_add_64(tmpAns1, simd_add_64(tmpAns2, tmpAns3));
}
//The total number of operations is 165.0
static inline bitblock128_t simd_mult_128(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t loMask = simd_lomask_128();
	bitblock128_t arg1_low = simd_and(arg1, loMask);
	bitblock128_t arg1_high = simd_srli_128((64), arg1);
	bitblock128_t arg2_low = simd_and(arg2, loMask);
	bitblock128_t arg2_high = simd_srli_128((64), arg2);
	bitblock128_t tmpAns1 = simd_umult_64(arg1_low, arg2_low);
	bitblock128_t tmpAns2 = simd_slli_128((64), simd_umult_64(arg1_low, arg2_high));
	bitblock128_t tmpAns3 = simd_slli_128((64), simd_umult_64(arg1_high, arg2_low));
	return simd_add_128(tmpAns1, simd_add_128(tmpAns2, tmpAns3));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_mult_16(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_mullo_epi16(arg1, arg2);
}
//The total number of operations is 7.0
static inline bitblock128_t hsimd_umin_hl_32(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_umin_16(hsimd_packh_32(arg1, arg2), hsimd_packl_32(arg1, arg2));
}
//The total number of operations is 73.0
static inline bitblock128_t hsimd_umin_hl_2(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_umin_1(hsimd_packh_2(arg1, arg2), hsimd_packl_2(arg1, arg2));
}
//The total number of operations is 66.6666666667
static inline bitblock128_t hsimd_umin_hl_4(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_umin_2(hsimd_packh_4(arg1, arg2), hsimd_packl_4(arg1, arg2));
}
//The total number of operations is 35.3333333333
static inline bitblock128_t hsimd_umin_hl_8(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_umin_4(hsimd_packh_8(arg1, arg2), hsimd_packl_8(arg1, arg2));
}
//The total number of operations is 7.0
static inline bitblock128_t hsimd_umin_hl_64(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_umin_32(hsimd_packh_64(arg1, arg2), hsimd_packl_64(arg1, arg2));
}
//The total number of operations is 17.6666666667
static inline bitblock128_t hsimd_umin_hl_128(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_umin_64(hsimd_packh_128(arg1, arg2), hsimd_packl_128(arg1, arg2));
}
//The total number of operations is 7.0
static inline bitblock128_t hsimd_umin_hl_16(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_umin_8(hsimd_packh_16(arg1, arg2), hsimd_packl_16(arg1, arg2));
}
//The total number of operations is 2.0
static inline bitblock128_t simd_nor(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_not(simd_or(arg1, arg2));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_gt_32(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_cmpgt_epi32(arg1, arg2);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_gt_1(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_andc(arg2, arg1);
}
//The total number of operations is 14.6666666667
static inline bitblock128_t simd_gt_2(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t tmp = simd_not(arg1);
	bitblock128_t tmpAns = simd_or(simd_and(tmp, arg2), simd_and(simd_slli_128(1, simd_and(arg1, simd_not(arg2))), simd_or(tmp, arg2)));
	return simd_ifh_1(simd_himask_2(), tmpAns, simd_srli_128(1, tmpAns));
}
//The total number of operations is 10.0
static inline bitblock128_t simd_gt_4(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_ifh_1(simd_himask_8(), simd_gt_8(simd_and(simd_himask_8(), arg1), arg2), simd_gt_8(simd_slli_8(4, arg1), simd_slli_8(4, arg2)));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_gt_8(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_cmpgt_epi8(arg1, arg2);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_gt_64(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_cmpgt_epi64(arg1, arg2);
}
//The total number of operations is 23.75
static inline bitblock128_t simd_gt_128(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t hiAns = simd_gt_64(arg1, arg2);
	bitblock128_t loAns = simd_ugt_64(arg1, arg2);
	bitblock128_t mask = simd_and(loAns, simd_srli_128((64), simd_eq_64(arg1, arg2)));
	mask = simd_or(mask, simd_slli_128((64), mask));
	return simd_or(simd_srai_128((64), hiAns), mask);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_gt_16(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_cmpgt_epi16(arg1, arg2);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_not(bitblock128_t arg1)
{
	return simd_xor(arg1, simd_constant_32(-1));
}
//The total number of operations is 13.0
static inline bitblock128_t bitblock_sll(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_sll_128(arg1, arg2);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_umult_32(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_mul_epu32(arg1, arg2);
}
//The total number of operations is 289.0
static inline bitblock128_t simd_umult_1(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t loMask = simd_lomask_2();
	bitblock128_t tmpAns1 = simd_umult_2(simd_and(loMask, arg1), simd_and(loMask, arg2));
	bitblock128_t tmpAns2 = simd_umult_2(simd_and(loMask, simd_srli_4((2), arg1)), simd_and(loMask, simd_srli_4((2), arg2)));
	return simd_or(tmpAns1, simd_slli_4((2), tmpAns2));
}
//The total number of operations is 139.0
static inline bitblock128_t simd_umult_2(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t loMask = simd_lomask_4();
	bitblock128_t tmpAns1 = simd_umult_4(simd_and(loMask, arg1), simd_and(loMask, arg2));
	bitblock128_t tmpAns2 = simd_umult_4(simd_and(loMask, simd_srli_8((4), arg1)), simd_and(loMask, simd_srli_8((4), arg2)));
	return simd_or(tmpAns1, simd_slli_8((4), tmpAns2));
}
//The total number of operations is 64.0
static inline bitblock128_t simd_umult_4(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t loMask = simd_lomask_8();
	bitblock128_t tmpAns1 = simd_umult_8(simd_and(loMask, arg1), simd_and(loMask, arg2));
	bitblock128_t tmpAns2 = simd_umult_8(simd_and(loMask, simd_srli_16((8), arg1)), simd_and(loMask, simd_srli_16((8), arg2)));
	return simd_or(tmpAns1, simd_slli_16((8), tmpAns2));
}
//The total number of operations is 28.0
static inline bitblock128_t simd_umult_8(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t loMask = simd_lomask_16();
	bitblock128_t tmpAns1 = simd_umult_16(simd_and(loMask, arg1), simd_and(loMask, arg2));
	bitblock128_t tmpAns2 = simd_umult_16(simd_and(loMask, simd_srli_32((16), arg1)), simd_and(loMask, simd_srli_32((16), arg2)));
	return simd_or(tmpAns1, simd_slli_32((16), tmpAns2));
}
//The total number of operations is 45.0
static inline bitblock128_t simd_umult_64(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t loMask1 = simd_lomask_128();
	bitblock128_t arg11 = simd_and(arg1, loMask1);
	bitblock128_t arg22 = simd_and(arg2, loMask1);
	bitblock128_t loMask2 = simd_lomask_64();
	bitblock128_t arg1_low = simd_and(arg11, loMask2);
	bitblock128_t arg1_high = simd_srli_64((32), arg11);
	bitblock128_t arg2_low = simd_and(arg22, loMask2);
	bitblock128_t arg2_high = simd_srli_64((32), arg22);
	bitblock128_t tmpAns1 = simd_umult_32(arg1_low, arg2_low);
	bitblock128_t tmpAns2 = simd_slli_128((32), simd_umult_32(arg1_low, arg2_high));
	bitblock128_t tmpAns3 = simd_slli_128((32), simd_umult_32(arg1_high, arg2_low));
	bitblock128_t tmpAns4 = simd_slli_128(64, simd_umult_32(arg1_high, arg2_high));
	return simd_add_128(tmpAns1, simd_add_128(tmpAns2, simd_add_128(tmpAns3, tmpAns4)));
}
//The total number of operations is 10.0
static inline bitblock128_t simd_umult_16(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t loMask = simd_lomask_32();
	bitblock128_t tmpAns1 = simd_umult_32(simd_and(loMask, arg1), simd_and(loMask, arg2));
	bitblock128_t tmpAns2 = simd_umult_32(simd_and(loMask, simd_srli_64((32), arg1)), simd_and(loMask, simd_srli_64((32), arg2)));
	return simd_or(tmpAns1, simd_slli_64((32), tmpAns2));
}
//The total number of operations is 1.0
static inline bitblock128_t hsimd_add_hl_32(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_hadd_epi16(arg2, arg1);
}
//The total number of operations is 73.0
static inline bitblock128_t hsimd_add_hl_2(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_add_1(hsimd_packh_2(arg1, arg2), hsimd_packl_2(arg1, arg2));
}
//The total number of operations is 59.0
static inline bitblock128_t hsimd_add_hl_4(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_add_2(hsimd_packh_4(arg1, arg2), hsimd_packl_4(arg1, arg2));
}
//The total number of operations is 35.3333333333
static inline bitblock128_t hsimd_add_hl_8(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_add_4(hsimd_packh_8(arg1, arg2), hsimd_packl_8(arg1, arg2));
}
//The total number of operations is 1.0
static inline bitblock128_t hsimd_add_hl_64(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_hadd_epi32(arg2, arg1);
}
//The total number of operations is 11.6666666667
static inline bitblock128_t hsimd_add_hl_128(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_add_64(hsimd_packh_128(arg1, arg2), hsimd_packl_128(arg1, arg2));
}
//The total number of operations is 7.0
static inline bitblock128_t hsimd_add_hl_16(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_add_8(hsimd_packh_16(arg1, arg2), hsimd_packl_16(arg1, arg2));
}
//The total number of operations is 7.0
static inline bitblock128_t simd_ult_32(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t high_bit = simd_constant_32((2147483648ULL));
	return simd_lt_32(simd_xor(arg1, high_bit), simd_xor(arg2, high_bit));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_ult_1(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_andc(arg2, arg1);
}
//The total number of operations is 13.6666666667
static inline bitblock128_t simd_ult_2(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t tmp = simd_not(arg1);
	bitblock128_t tmpAns = simd_or(simd_and(tmp, arg2), simd_and(simd_slli_128(1, simd_and(tmp, arg2)), simd_or(tmp, arg2)));
	return simd_ifh_1(simd_himask_2(), tmpAns, simd_srli_128(1, tmpAns));
}
//The total number of operations is 20.0
static inline bitblock128_t simd_ult_4(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_ifh_1(simd_himask_8(), simd_ult_8(arg1, simd_and(simd_himask_8(), arg2)), simd_ult_8(simd_andc(arg1, simd_himask_8()), simd_andc(arg2, simd_himask_8())));
}
//The total number of operations is 7.0
static inline bitblock128_t simd_ult_8(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t high_bit = simd_constant_8((128));
	return simd_lt_8(simd_xor(arg1, high_bit), simd_xor(arg2, high_bit));
}
//The total number of operations is 7.0
static inline bitblock128_t simd_ult_64(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t high_bit = simd_constant_64((9223372036854775808ULL));
	return simd_lt_64(simd_xor(arg1, high_bit), simd_xor(arg2, high_bit));
}
//The total number of operations is 26.75
static inline bitblock128_t simd_ult_128(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t tmpAns = simd_ult_64(arg1, arg2);
	bitblock128_t mask = simd_and(tmpAns, simd_srli_128((64), simd_eq_64(arg1, arg2)));
	mask = simd_or(mask, simd_slli_128((64), mask));
	return simd_or(simd_srai_128((64), tmpAns), mask);
}
//The total number of operations is 7.0
static inline bitblock128_t simd_ult_16(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t high_bit = simd_constant_16((32768));
	return simd_lt_16(simd_xor(arg1, high_bit), simd_xor(arg2, high_bit));
}
//The total number of operations is 1.0
static inline bitblock128_t bitblock_load_unaligned(const bitblock128_t* arg1)
{
	return _mm_loadu_si128((bitblock128_t*)(arg1));
}
//The total number of operations is 19.0
static inline bitblock128_t simd_ctz_32(bitblock128_t arg1)
{
	return simd_popcount_32(simd_andc(simd_sub_32(arg1, simd_constant_32(1)), arg1));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_ctz_1(bitblock128_t arg1)
{
	return simd_not(arg1);
}
//The total number of operations is 10.6666666667
static inline bitblock128_t simd_ctz_2(bitblock128_t arg1)
{
	bitblock128_t tmp = simd_not(arg1);
	return simd_ifh_1(simd_himask_2(), simd_and(tmp, simd_slli_128(1, tmp)), simd_and(simd_srli_128(1, arg1), tmp));
}
//The total number of operations is 14.0
static inline bitblock128_t simd_ctz_4(bitblock128_t arg1)
{
	return simd_popcount_4(simd_andc(simd_sub_4(arg1, simd_constant_4(1)), arg1));
}
//The total number of operations is 13.0
static inline bitblock128_t simd_ctz_8(bitblock128_t arg1)
{
	return simd_popcount_8(simd_andc(simd_sub_8(arg1, simd_constant_8(1)), arg1));
}
//The total number of operations is 14.0
static inline bitblock128_t simd_ctz_64(bitblock128_t arg1)
{
	return simd_popcount_64(simd_andc(simd_sub_64(arg1, simd_constant_64(1)), arg1));
}
//The total number of operations is 26.6666666667
static inline bitblock128_t simd_ctz_128(bitblock128_t arg1)
{
	return simd_popcount_128(simd_andc(simd_sub_128(arg1, simd_constant_128(1)), arg1));
}
//The total number of operations is 16.0
static inline bitblock128_t simd_ctz_16(bitblock128_t arg1)
{
	return simd_popcount_16(simd_andc(simd_sub_16(arg1, simd_constant_16(1)), arg1));
}
//The total number of operations is 10.0
static inline bitblock128_t simd_sll_64(bitblock128_t arg1, bitblock128_t shift_mask)
{
	return simd_ifh_1(simd_himask_128(), _mm_sll_epi64(arg1, simd_and(_mm_srli_si128(shift_mask, (int32_t)(8)), _mm_cvtsi32_si128((int32_t)(63)))), _mm_sll_epi64(arg1, simd_and(shift_mask, _mm_cvtsi32_si128((int32_t)(63)))));
}
//The total number of operations is 13.0
static inline bitblock128_t simd_sll_128(bitblock128_t arg1, bitblock128_t shift_mask)
{
	bitblock128_t shift = simd_and(shift_mask, _mm_cvtsi32_si128((int32_t)(127)));
	return simd_or(_mm_sll_epi64(arg1, shift), simd_or(_mm_slli_si128(_mm_sll_epi64(arg1, simd_sub_32(shift, _mm_cvtsi32_si128((int32_t)(64)))), (int32_t)(8)), _mm_slli_si128(_mm_srl_epi64(arg1, simd_sub_32(_mm_cvtsi32_si128((int32_t)(64)), shift)), (int32_t)(8))));
}
//The total number of operations is 1.0
static inline bitblock128_t mvmd_fill_32(uint64_t val1)
{
	return _mm_set1_epi32((int32_t)(val1));
}
//The total number of operations is 1.0
static inline bitblock128_t mvmd_fill_1(uint64_t val1)
{
	return mvmd_fill_32((-1*val1));
}
//The total number of operations is 1.0
static inline bitblock128_t mvmd_fill_2(uint64_t val1)
{
	return mvmd_fill_4(((val1<<2)|val1));
}
//The total number of operations is 1.0
static inline bitblock128_t mvmd_fill_4(uint64_t val1)
{
	return mvmd_fill_8(((val1<<4)|val1));
}
//The total number of operations is 1.0
static inline bitblock128_t mvmd_fill_8(uint64_t val1)
{
	return _mm_set1_epi8((int32_t)(val1));
}
//The total number of operations is 1.0
static inline bitblock128_t mvmd_fill_64(uint64_t val1)
{
	return _mm_set_epi32((int32_t)((val1>>32)), (int32_t)(val1), (int32_t)((val1>>32)), (int32_t)(val1));
}
//The total number of operations is 1.0
static inline bitblock128_t mvmd_fill_128(uint64_t val1)
{
	return _mm_set_epi32((int32_t)(0), (int32_t)(0), (int32_t)((val1>>32)), (int32_t)(val1));
}
//The total number of operations is 1.0
static inline bitblock128_t mvmd_fill_16(uint64_t val1)
{
	return _mm_set1_epi16((int32_t)(val1));
}
//The total number of operations is 19.0
static inline bitblock128_t mvmd_shuffle_32(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t tmp1 = simd_and(simd_constant_32((3)), arg2);
	bitblock128_t msk1 = simd_add_32(tmp1, tmp1);
	bitblock128_t msk2 = simd_add_32(msk1, simd_constant_32(1));
	bitblock128_t msk = simd_or(msk1, simd_slli_32((16), msk2));
	return simd_ifh_32(arg2, simd_constant_32(0), mvmd_shuffle_16(arg1, msk));
}
//The total number of operations is 1.0
static inline bitblock128_t mvmd_shuffle_8(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_shuffle_epi8(arg1, arg2);
}
//The total number of operations is 28.0
static inline bitblock128_t mvmd_shuffle_64(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t tmp1 = simd_and(simd_constant_64((1)), arg2);
	bitblock128_t msk1 = simd_add_64(tmp1, tmp1);
	bitblock128_t msk2 = simd_add_64(msk1, simd_constant_64(1));
	bitblock128_t msk = simd_or(msk1, simd_slli_64((32), msk2));
	return simd_ifh_64(arg2, simd_constant_64(0), mvmd_shuffle_32(arg1, msk));
}
//The total number of operations is 10.0
static inline bitblock128_t mvmd_shuffle_16(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t tmp1 = simd_and(simd_constant_16((7)), arg2);
	bitblock128_t msk1 = simd_add_16(tmp1, tmp1);
	bitblock128_t msk2 = simd_add_16(msk1, simd_constant_16(1));
	bitblock128_t msk = simd_or(msk1, simd_slli_16((8), msk2));
	return simd_ifh_16(arg2, simd_constant_16(0), mvmd_shuffle_8(arg1, msk));
}
//The total number of operations is 1.0
static inline bitblock128_t hsimd_packss_32(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_packs_epi32(arg2, arg1);
}
//The total number of operations is 108.666666667
static inline bitblock128_t hsimd_packss_2(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t hiBound = simd_srli_2(1, simd_lomask_2());
	bitblock128_t loBound = simd_not(hiBound);
	return hsimd_packl_2(simd_ifh_1(simd_gt_2(arg1, hiBound), hiBound, simd_ifh_1(simd_gt_2(arg1, loBound), arg1, loBound)), simd_ifh_1(simd_gt_2(arg2, hiBound), hiBound, simd_ifh_1(simd_gt_2(arg2, loBound), arg2, loBound)));
}
//The total number of operations is 79.3333333333
static inline bitblock128_t hsimd_packss_4(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t hiBound = simd_srli_4(1, simd_lomask_4());
	bitblock128_t loBound = simd_not(hiBound);
	return hsimd_packl_4(simd_ifh_1(simd_gt_4(arg1, hiBound), hiBound, simd_ifh_1(simd_gt_4(arg1, loBound), arg1, loBound)), simd_ifh_1(simd_gt_4(arg2, hiBound), hiBound, simd_ifh_1(simd_gt_4(arg2, loBound), arg2, loBound)));
}
//The total number of operations is 32.6666666667
static inline bitblock128_t hsimd_packss_8(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t hiBound = simd_srli_8(1, simd_lomask_8());
	bitblock128_t loBound = simd_not(hiBound);
	return hsimd_packl_8(simd_ifh_1(simd_gt_8(arg1, hiBound), hiBound, simd_ifh_1(simd_gt_8(arg1, loBound), arg1, loBound)), simd_ifh_1(simd_gt_8(arg2, hiBound), hiBound, simd_ifh_1(simd_gt_8(arg2, loBound), arg2, loBound)));
}
//The total number of operations is 21.0
static inline bitblock128_t hsimd_packss_64(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t hiBound = simd_srli_64(1, simd_lomask_64());
	bitblock128_t loBound = simd_not(hiBound);
	return hsimd_packl_64(simd_ifh_1(simd_gt_64(arg1, hiBound), hiBound, simd_ifh_1(simd_gt_64(arg1, loBound), arg1, loBound)), simd_ifh_1(simd_gt_64(arg2, hiBound), hiBound, simd_ifh_1(simd_gt_64(arg2, loBound), arg2, loBound)));
}
//The total number of operations is 115.666666667
static inline bitblock128_t hsimd_packss_128(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t hiBound = simd_srli_128(1, simd_lomask_128());
	bitblock128_t loBound = simd_not(hiBound);
	return hsimd_packl_128(simd_ifh_1(simd_gt_128(arg1, hiBound), hiBound, simd_ifh_1(simd_gt_128(arg1, loBound), arg1, loBound)), simd_ifh_1(simd_gt_128(arg2, hiBound), hiBound, simd_ifh_1(simd_gt_128(arg2, loBound), arg2, loBound)));
}
//The total number of operations is 1.0
static inline bitblock128_t hsimd_packss_16(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_packs_epi16(arg2, arg1);
}
//The total number of operations is 13.0
static inline bitblock128_t bitblock_srl(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_srl_128(arg1, arg2);
}
//The total number of operations is 1.0
static inline void bitblock_store_aligned(bitblock128_t arg1, bitblock128_t* arg2)
{
	_mm_store_si128((bitblock128_t*)(arg2), arg1);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_eq_32(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_cmpeq_epi32(arg1, arg2);
}
//The total number of operations is 2.0
static inline bitblock128_t simd_eq_1(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_not(simd_xor(arg1, arg2));
}
//The total number of operations is 8.0
static inline bitblock128_t simd_eq_2(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t tmpAns = simd_eq_1(arg1, arg2);
	bitblock128_t loMask = simd_and(tmpAns, simd_srli_2((1), tmpAns));
	bitblock128_t hiMask = simd_slli_2((1), loMask);
	return simd_or(loMask, hiMask);
}
//The total number of operations is 9.0
static inline bitblock128_t simd_eq_4(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_or(simd_and(simd_himask_8(), simd_eq_8(simd_and(simd_himask_8(), arg1), simd_and(simd_himask_8(), arg2))), simd_and(simd_lomask_8(), simd_eq_8(simd_and(simd_lomask_8(), arg1), simd_and(simd_lomask_8(), arg2))));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_eq_8(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_cmpeq_epi8(arg1, arg2);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_eq_64(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_cmpeq_epi64(arg1, arg2);
}
//The total number of operations is 7.66666666667
static inline bitblock128_t simd_eq_128(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t tmpAns = simd_eq_64(arg1, arg2);
	bitblock128_t loMask = simd_and(tmpAns, simd_srli_128((64), tmpAns));
	bitblock128_t hiMask = simd_slli_128((64), loMask);
	return simd_or(loMask, hiMask);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_eq_16(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_cmpeq_epi16(arg1, arg2);
}
//The total number of operations is 17.0
static inline bitblock128_t simd_popcount_32(bitblock128_t arg1)
{
	return simd_add_hl_32(simd_popcount_16(arg1));
}
//The total number of operations is 0
static inline bitblock128_t simd_popcount_1(bitblock128_t arg1)
{
	return arg1;
}
//The total number of operations is 3.0
static inline bitblock128_t simd_popcount_2(bitblock128_t arg1)
{
	return simd_add_hl_2(simd_popcount_1(arg1));
}
//The total number of operations is 7.0
static inline bitblock128_t simd_popcount_4(bitblock128_t arg1)
{
	return simd_add_hl_4(simd_popcount_2(arg1));
}
//The total number of operations is 11.0
static inline bitblock128_t simd_popcount_8(bitblock128_t arg1)
{
	return simd_add_hl_8(simd_popcount_4(arg1));
}
//The total number of operations is 12.0
static inline bitblock128_t simd_popcount_64(bitblock128_t arg1)
{
	return _mm_sad_epu8(simd_popcount_8(arg1), simd_constant_8(0));
}
//The total number of operations is 16.3333333333
static inline bitblock128_t simd_popcount_128(bitblock128_t arg1)
{
	bitblock128_t tmpAns = simd_popcount_64(arg1);
	return simd_add_64(simd_and(tmpAns, simd_lomask_128()), simd_srli_128((64), tmpAns));
}
//The total number of operations is 14.0
static inline bitblock128_t simd_popcount_16(bitblock128_t arg1)
{
	return simd_add_hl_16(simd_popcount_8(arg1));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_andc(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_andnot_si128(arg2, arg1);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_neg_32(bitblock128_t arg1)
{
	return _mm_sign_epi32(arg1, simd_constant_32(-1));
}
//The total number of operations is 6.33333333333
static inline bitblock128_t simd_neg_2(bitblock128_t arg1)
{
	return simd_ifh_1(simd_himask_2(), simd_xor(arg1, simd_slli_128(1, arg1)), arg1);
}
//The total number of operations is 6.0
static inline bitblock128_t simd_neg_4(bitblock128_t arg1)
{
	return simd_sub_4(simd_constant_4(0), arg1);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_neg_8(bitblock128_t arg1)
{
	return simd_sub_8(simd_constant_8(0), arg1);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_neg_64(bitblock128_t arg1)
{
	return simd_sub_64(simd_constant_64(0), arg1);
}
//The total number of operations is 9.33333333333
static inline bitblock128_t simd_neg_128(bitblock128_t arg1)
{
	return simd_sub_128(simd_constant_128(0), arg1);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_neg_16(bitblock128_t arg1)
{
	return simd_sub_16(simd_constant_16(0), arg1);
}
//The total number of operations is 3.0
static inline bitblock128_t hsimd_packh_32(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_hsub_epi16(simd_srli_32((16), arg2), simd_srli_32((16), arg1));
}
//The total number of operations is 37.0
static inline bitblock128_t hsimd_packh_2(bitblock128_t arg1, bitblock128_t arg2)
{
	return hsimd_packl_2(simd_srli_64((1), arg1), simd_srli_64((1), arg2));
}
//The total number of operations is 26.3333333333
static inline bitblock128_t hsimd_packh_4(bitblock128_t arg1, bitblock128_t arg2)
{
	return hsimd_packl_4(simd_srli_64((2), arg1), simd_srli_64((2), arg2));
}
//The total number of operations is 15.6666666667
static inline bitblock128_t hsimd_packh_8(bitblock128_t arg1, bitblock128_t arg2)
{
	return hsimd_packl_8(simd_srli_64((4), arg1), simd_srli_64((4), arg2));
}
//The total number of operations is 3.0
static inline bitblock128_t hsimd_packh_64(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_hsub_epi32(simd_srli_64((32), arg2), simd_srli_64((32), arg1));
}
//The total number of operations is 5.33333333333
static inline bitblock128_t hsimd_packh_128(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_ifh_1(simd_himask_128(), arg1, simd_srli_128((64), arg2));
}
//The total number of operations is 3.0
static inline bitblock128_t hsimd_packh_16(bitblock128_t arg1, bitblock128_t arg2)
{
	return hsimd_packus_16(simd_srli_16((8), arg1), simd_srli_16((8), arg2));
}
//The total number of operations is 0
static inline bitblock128_t simd_himask_32()
{
	return simd_constant_32(-65536);
}
//The total number of operations is 0
static inline bitblock128_t simd_himask_2()
{
	return simd_constant_2((2));
}
//The total number of operations is 0
static inline bitblock128_t simd_himask_4()
{
	return simd_constant_4((12));
}
//The total number of operations is 0
static inline bitblock128_t simd_himask_8()
{
	return simd_constant_8((240));
}
//The total number of operations is 0
static inline bitblock128_t simd_himask_64()
{
	return _mm_set_epi32((int32_t)(-1), (int32_t)(0), (int32_t)(-1), (int32_t)(0));
}
//The total number of operations is 0
static inline bitblock128_t simd_himask_128()
{
	return _mm_set_epi32((int32_t)(-1), (int32_t)(-1), (int32_t)(0), (int32_t)(0));
}
//The total number of operations is 0
static inline bitblock128_t simd_himask_16()
{
	return simd_constant_16((65280));
}
//The total number of operations is 2.0
static inline bool bitblock_all(bitblock128_t arg1)
{
	return hsimd_signmask_8(simd_eq_8(arg1, simd_constant_8(-1))) == 65535;
}
//The total number of operations is 4.0
static inline bitblock128_t simd_ifh_32(bitblock128_t arg1, bitblock128_t arg2, bitblock128_t arg3)
{
	return simd_ifh_1(simd_gt_32(simd_constant_32(0), arg1), arg2, arg3);
}
//The total number of operations is 3.0
static inline bitblock128_t simd_ifh_1(bitblock128_t arg1, bitblock128_t arg2, bitblock128_t arg3)
{
	return simd_or(simd_and(arg2, arg1), simd_andc(arg3, arg1));
}
//The total number of operations is 8.0
static inline bitblock128_t simd_ifh_2(bitblock128_t arg1, bitblock128_t arg2, bitblock128_t arg3)
{
	return simd_ifh_1(simd_ifh_1(simd_himask_2(), arg1, simd_srli_2((1), arg1)), arg2, arg3);
}
//The total number of operations is 13.0
static inline bitblock128_t simd_ifh_4(bitblock128_t arg1, bitblock128_t arg2, bitblock128_t arg3)
{
	return simd_ifh_1(simd_gt_4(simd_constant_4(0), arg1), arg2, arg3);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_ifh_8(bitblock128_t arg1, bitblock128_t arg2, bitblock128_t arg3)
{
	return _mm_blendv_epi8(arg3, arg2, arg1);
}
//The total number of operations is 4.0
static inline bitblock128_t simd_ifh_64(bitblock128_t arg1, bitblock128_t arg2, bitblock128_t arg3)
{
	return simd_ifh_1(simd_gt_64(simd_constant_64(0), arg1), arg2, arg3);
}
//The total number of operations is 9.33333333333
static inline bitblock128_t simd_ifh_128(bitblock128_t arg1, bitblock128_t arg2, bitblock128_t arg3)
{
	return simd_ifh_64(simd_ifh_1(simd_himask_128(), arg1, simd_srli_128((64), arg1)), arg2, arg3);
}
//The total number of operations is 4.0
static inline bitblock128_t simd_ifh_16(bitblock128_t arg1, bitblock128_t arg2, bitblock128_t arg3)
{
	return simd_ifh_1(simd_gt_16(simd_constant_16(0), arg1), arg2, arg3);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_sub_32(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_sub_epi32(arg1, arg2);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_sub_1(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_xor(arg1, arg2);
}
//The total number of operations is 9.33333333333
static inline bitblock128_t simd_sub_2(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t tmp = simd_xor(arg1, arg2);
	return simd_ifh_1(simd_himask_2(), simd_xor(tmp, simd_slli_128(1, simd_and(simd_not(arg1), arg2))), tmp);
}
//The total number of operations is 6.0
static inline bitblock128_t simd_sub_4(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_ifh_1(simd_himask_8(), simd_sub_8(arg1, simd_and(simd_himask_8(), arg2)), simd_sub_8(arg1, arg2));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_sub_8(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_sub_epi8(arg1, arg2);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_sub_64(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_sub_epi64(arg1, arg2);
}
//The total number of operations is 9.33333333333
static inline bitblock128_t simd_sub_128(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t partial = simd_sub_64(arg1, arg2);
	bitblock128_t borrowMask = simd_or(simd_andc(arg2, arg1), simd_andc(partial, simd_xor(arg1, arg2)));
	bitblock128_t borrow = simd_slli_128((64), simd_srli_64((63), borrowMask));
	return simd_sub_64(partial, borrow);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_sub_16(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_sub_epi16(arg1, arg2);
}
//The total number of operations is 3.0
static inline bitblock128_t simd_add_hl_32(bitblock128_t arg1)
{
	return simd_add_64(simd_srli_32((16), arg1), simd_and(arg1, simd_lomask_32()));
}
//The total number of operations is 3.0
static inline bitblock128_t simd_add_hl_2(bitblock128_t arg1)
{
	return simd_sub_16(arg1, simd_and(simd_lomask_2(), simd_srli_16(1, arg1)));
}
//The total number of operations is 4.0
static inline bitblock128_t simd_add_hl_4(bitblock128_t arg1)
{
	return simd_add_8(simd_srli_4((2), arg1), simd_and(arg1, simd_lomask_4()));
}
//The total number of operations is 4.0
static inline bitblock128_t simd_add_hl_8(bitblock128_t arg1)
{
	return simd_add_16(simd_srli_8((4), arg1), simd_and(arg1, simd_lomask_8()));
}
//The total number of operations is 3.0
static inline bitblock128_t simd_add_hl_64(bitblock128_t arg1)
{
	return simd_add_64(simd_srli_64((32), arg1), simd_and(arg1, simd_lomask_64()));
}
//The total number of operations is 12.6666666667
static inline bitblock128_t simd_add_hl_128(bitblock128_t arg1)
{
	return simd_add_128(simd_srli_128((64), arg1), simd_and(arg1, simd_lomask_128()));
}
//The total number of operations is 3.0
static inline bitblock128_t simd_add_hl_16(bitblock128_t arg1)
{
	return simd_add_32(simd_srli_16((8), arg1), simd_and(arg1, simd_lomask_16()));
}
//The total number of operations is 10.0
static inline bitblock128_t simd_srl_64(bitblock128_t arg1, bitblock128_t shift_mask)
{
	return simd_ifh_1(simd_himask_128(), _mm_srl_epi64(arg1, simd_and(_mm_srli_si128(shift_mask, (int32_t)(8)), _mm_cvtsi32_si128((int32_t)(63)))), _mm_srl_epi64(arg1, simd_and(shift_mask, _mm_cvtsi32_si128((int32_t)(63)))));
}
//The total number of operations is 13.0
static inline bitblock128_t simd_srl_128(bitblock128_t arg1, bitblock128_t shift_mask)
{
	bitblock128_t shift = simd_and(shift_mask, _mm_cvtsi32_si128((int32_t)(127)));
	return simd_or(_mm_srl_epi64(arg1, shift), simd_or(_mm_srli_si128(_mm_srl_epi64(arg1, simd_sub_32(shift, _mm_cvtsi32_si128((int32_t)(64)))), (int32_t)(8)), _mm_srli_si128(_mm_sll_epi64(arg1, simd_sub_32(_mm_cvtsi32_si128((int32_t)(64)), shift)), (int32_t)(8))));
}
//The total number of operations is 0
static inline bitblock128_t simd_lomask_32()
{
	return simd_constant_32((65535));
}
//The total number of operations is 0
static inline bitblock128_t simd_lomask_2()
{
	return simd_constant_2((1));
}
//The total number of operations is 0
static inline bitblock128_t simd_lomask_4()
{
	return simd_constant_4((3));
}
//The total number of operations is 0
static inline bitblock128_t simd_lomask_8()
{
	return simd_constant_8((15));
}
//The total number of operations is 0
static inline bitblock128_t simd_lomask_64()
{
	return _mm_set_epi32((int32_t)(0), (int32_t)(-1), (int32_t)(0), (int32_t)(-1));
}
//The total number of operations is 0
static inline bitblock128_t simd_lomask_128()
{
	return _mm_set_epi32((int32_t)(0), (int32_t)(0), (int32_t)(-1), (int32_t)(-1));
}
//The total number of operations is 0
static inline bitblock128_t simd_lomask_16()
{
	return simd_constant_16((255));
}
//The total number of operations is 3.0
static inline uint64_t hsimd_signmask_32(bitblock128_t arg1)
{
	return hsimd_signmask_16(hsimd_packss_32(simd_constant_32(0), arg1));
}
//The total number of operations is 24.0
static inline uint64_t hsimd_signmask_4(bitblock128_t arg1)
{
	uint64_t tmpAns1 = hsimd_signmask_8(esimd_mergeh_4(arg1, simd_constant_4(0)));
	uint64_t tmpAns2 = hsimd_signmask_8(esimd_mergel_4(arg1, simd_constant_4(0)));
	return ((tmpAns1<<(16))+tmpAns2);
}
//The total number of operations is 1.0
static inline uint64_t hsimd_signmask_8(bitblock128_t arg1)
{
	return _mm_movemask_epi8(arg1);
}
//The total number of operations is 1.0
static inline uint64_t hsimd_signmask_64(bitblock128_t arg1)
{
	return _mm_movemask_pd(_mm_castsi128_pd(arg1));
}
//The total number of operations is 6.33333333333
static inline uint64_t hsimd_signmask_128(bitblock128_t arg1)
{
	return hsimd_signmask_64(hsimd_packh_128(simd_constant_128(0), arg1));
}
//The total number of operations is 2.0
static inline uint64_t hsimd_signmask_16(bitblock128_t arg1)
{
	return hsimd_signmask_8(hsimd_packss_16(simd_constant_16(0), arg1));
}
//The total number of operations is 3.0
static inline bitblock128_t esimd_zeroextendh_32(bitblock128_t arg1)
{
	return esimd_mergeh_64(simd_srli_64(32, arg1), simd_and(simd_lomask_64(), arg1));
}
//The total number of operations is 24.0
static inline bitblock128_t esimd_zeroextendh_1(bitblock128_t arg1)
{
	return esimd_mergeh_2(simd_srli_2(1, arg1), simd_and(simd_lomask_2(), arg1));
}
//The total number of operations is 14.0
static inline bitblock128_t esimd_zeroextendh_2(bitblock128_t arg1)
{
	return esimd_mergeh_4(simd_srli_4(2, arg1), simd_and(simd_lomask_4(), arg1));
}
//The total number of operations is 4.0
static inline bitblock128_t esimd_zeroextendh_4(bitblock128_t arg1)
{
	return esimd_mergeh_8(simd_srli_8(4, arg1), simd_and(simd_lomask_8(), arg1));
}
//The total number of operations is 3.0
static inline bitblock128_t esimd_zeroextendh_8(bitblock128_t arg1)
{
	return esimd_mergeh_16(simd_srli_16(8, arg1), simd_and(simd_lomask_16(), arg1));
}
//The total number of operations is 2.33333333333
static inline bitblock128_t esimd_zeroextendh_64(bitblock128_t arg1)
{
	return simd_srli_128(64, arg1);
}
//The total number of operations is 3.0
static inline bitblock128_t esimd_zeroextendh_16(bitblock128_t arg1)
{
	return esimd_mergeh_32(simd_srli_32(16, arg1), simd_and(simd_lomask_32(), arg1));
}
//The total number of operations is 1.0
static inline bitblock128_t esimd_zeroextendl_32(bitblock128_t arg1)
{
	return _mm_cvtepu32_epi64(arg1);
}
//The total number of operations is 24.0
static inline bitblock128_t esimd_zeroextendl_1(bitblock128_t arg1)
{
	return esimd_mergel_2(simd_srli_2(1, arg1), simd_and(simd_lomask_2(), arg1));
}
//The total number of operations is 14.0
static inline bitblock128_t esimd_zeroextendl_2(bitblock128_t arg1)
{
	return esimd_mergel_4(simd_srli_4(2, arg1), simd_and(simd_lomask_4(), arg1));
}
//The total number of operations is 4.0
static inline bitblock128_t esimd_zeroextendl_4(bitblock128_t arg1)
{
	return esimd_mergel_8(simd_srli_8(4, arg1), simd_and(simd_lomask_8(), arg1));
}
//The total number of operations is 1.0
static inline bitblock128_t esimd_zeroextendl_8(bitblock128_t arg1)
{
	return _mm_cvtepu8_epi16(arg1);
}
//The total number of operations is 1.0
static inline bitblock128_t esimd_zeroextendl_64(bitblock128_t arg1)
{
	return simd_and(simd_lomask_128(), arg1);
}
//The total number of operations is 1.0
static inline bitblock128_t esimd_zeroextendl_16(bitblock128_t arg1)
{
	return _mm_cvtepu16_epi32(arg1);
}
//The total number of operations is 1.0
static inline bitblock128_t mvmd_fill4_32(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4)
{
	return _mm_set_epi32((int32_t)(val1), (int32_t)(val2), (int32_t)(val3), (int32_t)(val4));
}
//The total number of operations is 5.0
static inline bitblock128_t mvmd_fill4_1(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4)
{
	return simd_ifh_1(simd_himask_4(), mvmd_fill2_1(val1, val2), mvmd_fill2_1(val3, val4));
}
//The total number of operations is 5.0
static inline bitblock128_t mvmd_fill4_2(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4)
{
	return simd_ifh_1(simd_himask_8(), mvmd_fill2_2(val1, val2), mvmd_fill2_2(val3, val4));
}
//The total number of operations is 5.0
static inline bitblock128_t mvmd_fill4_4(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4)
{
	return simd_ifh_1(simd_himask_16(), mvmd_fill2_4(val1, val2), mvmd_fill2_4(val3, val4));
}
//The total number of operations is 5.0
static inline bitblock128_t mvmd_fill4_8(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4)
{
	return simd_ifh_1(simd_himask_32(), mvmd_fill2_8(val1, val2), mvmd_fill2_8(val3, val4));
}
//The total number of operations is 3.0
static inline bitblock128_t mvmd_fill4_16(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4)
{
	return simd_or(mvmd_fill4_32((val1<<16), (val3<<16), (val1<<16), (val3<<16)), mvmd_fill4_32((val2&(65535)), (val4&(65535)), (val2&(65535)), (val4&(65535))));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_umin_32(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_min_epu32(arg1, arg2);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_umin_1(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_and(arg1, arg2);
}
//The total number of operations is 16.0
static inline bitblock128_t simd_umin_2(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_or(simd_and(simd_himask_4(), simd_umin_4(arg1, arg2)), simd_umin_4(simd_and(simd_lomask_4(), arg1), simd_and(simd_lomask_4(), arg2)));
}
//The total number of operations is 6.0
static inline bitblock128_t simd_umin_4(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_or(simd_and(simd_himask_8(), simd_umin_8(arg1, arg2)), simd_umin_8(simd_and(simd_lomask_8(), arg1), simd_and(simd_lomask_8(), arg2)));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_umin_8(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_min_epu8(arg1, arg2);
}
//The total number of operations is 7.0
static inline bitblock128_t simd_umin_64(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t high_bit = simd_constant_64((9223372036854775808ULL));
	return simd_xor(simd_min_64(simd_xor(arg1, high_bit), simd_xor(arg2, high_bit)), high_bit);
}
//The total number of operations is 22.6666666667
static inline bitblock128_t simd_umin_128(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t tmpAns = simd_umin_64(arg1, arg2);
	bitblock128_t eqMask1 = simd_srli_128((64), simd_eq_64(tmpAns, arg1));
	bitblock128_t eqMask2 = simd_srli_128((64), simd_eq_64(tmpAns, arg2));
	return simd_ifh_1(simd_himask_128(), tmpAns, simd_ifh_1(eqMask1, simd_ifh_1(eqMask2, tmpAns, arg1), arg2));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_umin_16(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_min_epu16(arg1, arg2);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_min_32(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_min_epi32(arg1, arg2);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_min_1(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_or(arg1, arg2);
}
//The total number of operations is 16.6666666667
static inline bitblock128_t simd_min_2(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t tmp1 = simd_srli_128(1, arg1);
	bitblock128_t tmp2 = simd_srli_128(1, arg2);
	return simd_ifh_1(simd_himask_2(), simd_or(arg1, arg2), simd_or(simd_and(arg1, simd_and(tmp1, simd_not(tmp2))), simd_and(arg2, simd_or(simd_and(simd_not(tmp1), tmp2), arg1))));
}
//The total number of operations is 9.0
static inline bitblock128_t simd_min_4(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t high_bit = simd_constant_4((8));
	return simd_xor(simd_umin_4(simd_xor(arg1, high_bit), simd_xor(arg2, high_bit)), high_bit);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_min_8(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_min_epi8(arg1, arg2);
}
//The total number of operations is 4.0
static inline bitblock128_t simd_min_64(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_ifh_1(simd_gt_64(arg1, arg2), arg2, arg1);
}
//The total number of operations is 26.6666666667
static inline bitblock128_t simd_min_128(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t hiAns = simd_min_64(arg1, arg2);
	bitblock128_t loAns = simd_umin_64(arg1, arg2);
	bitblock128_t eqMask1 = simd_srli_128((64), simd_eq_64(hiAns, arg1));
	bitblock128_t eqMask2 = simd_srli_128((64), simd_eq_64(hiAns, arg2));
	return simd_ifh_1(simd_himask_128(), hiAns, simd_ifh_1(eqMask1, simd_ifh_1(eqMask2, loAns, arg1), arg2));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_min_16(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_min_epi16(arg1, arg2);
}
//The total number of operations is 5.0
static inline bitblock128_t mvmd_fill2_32(uint64_t val1, uint64_t val2)
{
	return simd_ifh_1(simd_himask_64(), mvmd_fill_32(val1), mvmd_fill_32(val2));
}
//The total number of operations is 1.0
static inline bitblock128_t mvmd_fill2_1(uint64_t val1, uint64_t val2)
{
	return mvmd_fill_2(((val1<<1)|(val2&(1))));
}
//The total number of operations is 1.0
static inline bitblock128_t mvmd_fill2_2(uint64_t val1, uint64_t val2)
{
	return mvmd_fill_4(((val1<<2)|(val2&(3))));
}
//The total number of operations is 1.0
static inline bitblock128_t mvmd_fill2_4(uint64_t val1, uint64_t val2)
{
	return mvmd_fill_8(((val1<<4)|(val2&(15))));
}
//The total number of operations is 1.0
static inline bitblock128_t mvmd_fill2_8(uint64_t val1, uint64_t val2)
{
	return mvmd_fill_16(((val1<<8)|(val2&(255))));
}
//The total number of operations is 5.0
static inline bitblock128_t mvmd_fill2_64(uint64_t val1, uint64_t val2)
{
	return simd_ifh_1(simd_himask_128(), mvmd_fill_64(val1), mvmd_fill_64(val2));
}
//The total number of operations is 1.0
static inline bitblock128_t mvmd_fill2_16(uint64_t val1, uint64_t val2)
{
	return mvmd_fill_32(((val1<<16)|(val2&(65535))));
}
//The total number of operations is 2.0
static inline bool bitblock_any(bitblock128_t arg1)
{
	return hsimd_signmask_8(simd_eq_8(arg1, simd_constant_8(0))) != 65535;
}
//The total number of operations is 18.3333333333
static inline uint64_t bitblock_popcount(bitblock128_t arg1)
{
	return mvmd_extract_64(0, simd_popcount_128(arg1));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_or(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_or_si128(arg1, arg2);
}
//The total number of operations is 3.0
static inline bitblock128_t hsimd_packl_32(bitblock128_t arg1, bitblock128_t arg2)
{
	return hsimd_packus_32(simd_and(arg1, simd_lomask_32()), simd_and(arg2, simd_lomask_32()));
}
//The total number of operations is 35.0
static inline bitblock128_t hsimd_packl_2(bitblock128_t arg1, bitblock128_t arg2)
{
	return hsimd_packl_4(simd_ifh_1(simd_himask_2(), simd_srli_128((1), arg1), arg1), simd_ifh_1(simd_himask_2(), simd_srli_128((1), arg2), arg2));
}
//The total number of operations is 24.3333333333
static inline bitblock128_t hsimd_packl_4(bitblock128_t arg1, bitblock128_t arg2)
{
	return hsimd_packl_8(simd_ifh_1(simd_himask_4(), simd_srli_128((2), arg1), arg1), simd_ifh_1(simd_himask_4(), simd_srli_128((2), arg2), arg2));
}
//The total number of operations is 13.6666666667
static inline bitblock128_t hsimd_packl_8(bitblock128_t arg1, bitblock128_t arg2)
{
	return hsimd_packl_16(simd_ifh_1(simd_himask_8(), simd_srli_128((4), arg1), arg1), simd_ifh_1(simd_himask_8(), simd_srli_128((4), arg2), arg2));
}
//The total number of operations is 3.0
static inline bitblock128_t hsimd_packl_64(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_hsub_epi32(simd_and(arg2, simd_lomask_64()), simd_and(arg1, simd_lomask_64()));
}
//The total number of operations is 5.33333333333
static inline bitblock128_t hsimd_packl_128(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_ifh_1(simd_himask_128(), simd_slli_128((64), arg1), arg2);
}
//The total number of operations is 3.0
static inline bitblock128_t hsimd_packl_16(bitblock128_t arg1, bitblock128_t arg2)
{
	return hsimd_packus_16(simd_and(arg1, simd_lomask_16()), simd_and(arg2, simd_lomask_16()));
}
//The total number of operations is 13.0
static inline bitblock128_t mvmd_fill8_1(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4, uint64_t val5, uint64_t val6, uint64_t val7, uint64_t val8)
{
	return simd_ifh_1(simd_himask_8(), mvmd_fill4_1(val1, val2, val3, val4), mvmd_fill4_1(val5, val6, val7, val8));
}
//The total number of operations is 13.0
static inline bitblock128_t mvmd_fill8_2(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4, uint64_t val5, uint64_t val6, uint64_t val7, uint64_t val8)
{
	return simd_ifh_1(simd_himask_16(), mvmd_fill4_2(val1, val2, val3, val4), mvmd_fill4_2(val5, val6, val7, val8));
}
//The total number of operations is 7.0
static inline bitblock128_t mvmd_fill8_4(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4, uint64_t val5, uint64_t val6, uint64_t val7, uint64_t val8)
{
	return simd_or(mvmd_fill8_8((val1<<4), (val3<<4), (val5<<4), (val7<<4), (val1<<4), (val3<<4), (val5<<4), (val7<<4)), mvmd_fill8_8((val2&(15)), (val4&(15)), (val6&(15)), (val8&(15)), (val2&(15)), (val4&(15)), (val6&(15)), (val8&(15))));
}
//The total number of operations is 3.0
static inline bitblock128_t mvmd_fill8_8(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4, uint64_t val5, uint64_t val6, uint64_t val7, uint64_t val8)
{
	return simd_or(mvmd_fill8_16((val1<<8), (val3<<8), (val5<<8), (val7<<8), (val1<<8), (val3<<8), (val5<<8), (val7<<8)), mvmd_fill8_16((val2&(255)), (val4&(255)), (val6&(255)), (val8&(255)), (val2&(255)), (val4&(255)), (val6&(255)), (val8&(255))));
}
//The total number of operations is 1.0
static inline bitblock128_t mvmd_fill8_16(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4, uint64_t val5, uint64_t val6, uint64_t val7, uint64_t val8)
{
	return _mm_set_epi16((int32_t)(val1), (int32_t)(val2), (int32_t)(val3), (int32_t)(val4), (int32_t)(val5), (int32_t)(val6), (int32_t)(val7), (int32_t)(val8));
}
//The total number of operations is 7.0
static inline bitblock128_t hsimd_min_hl_32(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_min_16(hsimd_packh_32(arg1, arg2), hsimd_packl_32(arg1, arg2));
}
//The total number of operations is 73.0
static inline bitblock128_t hsimd_min_hl_2(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_min_1(hsimd_packh_2(arg1, arg2), hsimd_packl_2(arg1, arg2));
}
//The total number of operations is 67.3333333333
static inline bitblock128_t hsimd_min_hl_4(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_min_2(hsimd_packh_4(arg1, arg2), hsimd_packl_4(arg1, arg2));
}
//The total number of operations is 38.3333333333
static inline bitblock128_t hsimd_min_hl_8(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_min_4(hsimd_packh_8(arg1, arg2), hsimd_packl_8(arg1, arg2));
}
//The total number of operations is 7.0
static inline bitblock128_t hsimd_min_hl_64(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_min_32(hsimd_packh_64(arg1, arg2), hsimd_packl_64(arg1, arg2));
}
//The total number of operations is 14.6666666667
static inline bitblock128_t hsimd_min_hl_128(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_min_64(hsimd_packh_128(arg1, arg2), hsimd_packl_128(arg1, arg2));
}
//The total number of operations is 7.0
static inline bitblock128_t hsimd_min_hl_16(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_min_8(hsimd_packh_16(arg1, arg2), hsimd_packl_16(arg1, arg2));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_xor(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_xor_si128(arg1, arg2);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_umax_32(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_max_epu32(arg1, arg2);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_umax_1(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_or(arg1, arg2);
}
//The total number of operations is 15.6666666667
static inline bitblock128_t simd_umax_2(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_ifh_1(simd_himask_2(), simd_or(arg1, arg2), simd_or(simd_and(arg2, simd_srli_128(1, simd_or(simd_not(arg1), arg2))), simd_and(arg1, simd_srli_128(1, simd_or(arg1, simd_not(arg2))))));
}
//The total number of operations is 6.0
static inline bitblock128_t simd_umax_4(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_or(simd_and(simd_himask_8(), simd_umax_8(arg1, arg2)), simd_umax_8(simd_and(simd_lomask_8(), arg1), simd_and(simd_lomask_8(), arg2)));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_umax_8(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_max_epu8(arg1, arg2);
}
//The total number of operations is 7.0
static inline bitblock128_t simd_umax_64(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t high_bit = simd_constant_64((9223372036854775808ULL));
	return simd_xor(simd_max_64(simd_xor(arg1, high_bit), simd_xor(arg2, high_bit)), high_bit);
}
//The total number of operations is 22.6666666667
static inline bitblock128_t simd_umax_128(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t tmpAns = simd_umax_64(arg1, arg2);
	bitblock128_t eqMask1 = simd_srli_128((64), simd_eq_64(tmpAns, arg1));
	bitblock128_t eqMask2 = simd_srli_128((64), simd_eq_64(tmpAns, arg2));
	return simd_ifh_1(simd_himask_128(), tmpAns, simd_ifh_1(eqMask1, simd_ifh_1(eqMask2, tmpAns, arg1), arg2));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_umax_16(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_max_epu16(arg1, arg2);
}
//The total number of operations is 1.0
static inline bitblock128_t bitblock_load_aligned(const bitblock128_t* arg1)
{
	return _mm_load_si128((bitblock128_t*)(arg1));
}
//The total number of operations is 1.0
static inline void bitblock_store_unaligned(bitblock128_t arg1, bitblock128_t* arg2)
{
	_mm_storeu_si128((bitblock128_t*)(arg2), arg1);
}
//The total number of operations is 1.0
static inline bitblock128_t esimd_signextendl_32(bitblock128_t arg1)
{
	return _mm_cvtepi32_epi64(arg1);
}
//The total number of operations is 31.0
static inline bitblock128_t esimd_signextendl_1(bitblock128_t arg1)
{
	return esimd_mergel_2(simd_srai_2(1, arg1), simd_srai_2(1, simd_slli_2(1, arg1)));
}
//The total number of operations is 33.0
static inline bitblock128_t esimd_signextendl_2(bitblock128_t arg1)
{
	return esimd_mergel_4(simd_srai_4(2, arg1), simd_srai_4(2, simd_slli_4(2, arg1)));
}
//The total number of operations is 13.0
static inline bitblock128_t esimd_signextendl_4(bitblock128_t arg1)
{
	return esimd_mergel_8(simd_srai_8(4, arg1), simd_srai_8(4, simd_slli_8(4, arg1)));
}
//The total number of operations is 1.0
static inline bitblock128_t esimd_signextendl_8(bitblock128_t arg1)
{
	return _mm_cvtepi8_epi16(arg1);
}
//The total number of operations is 13.4166666667
static inline bitblock128_t esimd_signextendl_64(bitblock128_t arg1)
{
	return simd_srai_128(64, simd_slli_128(64, arg1));
}
//The total number of operations is 1.0
static inline bitblock128_t esimd_signextendl_16(bitblock128_t arg1)
{
	return _mm_cvtepi16_epi32(arg1);
}
//The total number of operations is 1.0
static inline bitblock128_t hsimd_packus_32(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_packus_epi32(arg2, arg1);
}
//The total number of operations is 75.0
static inline bitblock128_t hsimd_packus_2(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t arg11 = simd_ifh_2(arg1, simd_constant_2(0), arg1);
	bitblock128_t arg12 = simd_and(simd_lomask_2(), arg11);
	bitblock128_t arg21 = simd_ifh_2(arg2, simd_constant_2(0), arg2);
	bitblock128_t arg22 = simd_and(simd_lomask_2(), arg21);
	return hsimd_packl_2(simd_ifh_1(simd_eq_2(arg12, arg11), arg12, simd_lomask_2()), simd_ifh_1(simd_eq_2(arg22, arg21), arg22, simd_lomask_2()));
}
//The total number of operations is 74.3333333333
static inline bitblock128_t hsimd_packus_4(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t hiPart = hsimd_packh_4(arg1, arg2);
	return simd_ifh_2(hiPart, simd_constant_2(0), simd_or(simd_gt_2(hiPart, simd_constant_2(0)), hsimd_packl_4(arg1, arg2)));
}
//The total number of operations is 25.6666666667
static inline bitblock128_t hsimd_packus_8(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t arg11 = simd_ifh_8(arg1, simd_constant_8(0), arg1);
	bitblock128_t arg12 = simd_and(simd_lomask_8(), arg11);
	bitblock128_t arg21 = simd_ifh_8(arg2, simd_constant_8(0), arg2);
	bitblock128_t arg22 = simd_and(simd_lomask_8(), arg21);
	return hsimd_packl_8(simd_ifh_1(simd_eq_8(arg12, arg11), arg12, simd_lomask_8()), simd_ifh_1(simd_eq_8(arg22, arg21), arg22, simd_lomask_8()));
}
//The total number of operations is 12.0
static inline bitblock128_t hsimd_packus_64(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t hiPart = hsimd_packh_64(arg1, arg2);
	return simd_ifh_32(hiPart, simd_constant_32(0), simd_or(simd_gt_32(hiPart, simd_constant_32(0)), hsimd_packl_64(arg1, arg2)));
}
//The total number of operations is 16.6666666667
static inline bitblock128_t hsimd_packus_128(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t hiPart = hsimd_packh_128(arg1, arg2);
	return simd_ifh_64(hiPart, simd_constant_64(0), simd_or(simd_gt_64(hiPart, simd_constant_64(0)), hsimd_packl_128(arg1, arg2)));
}
//The total number of operations is 1.0
static inline bitblock128_t hsimd_packus_16(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_packus_epi16(arg2, arg1);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_abs_32(bitblock128_t arg1)
{
	return _mm_abs_epi32(arg1);
}
//The total number of operations is 7.33333333333
static inline bitblock128_t simd_abs_2(bitblock128_t arg1)
{
	return simd_ifh_1(simd_himask_2(), simd_and(arg1, simd_slli_128(1, simd_not(arg1))), arg1);
}
//The total number of operations is 19.0
static inline bitblock128_t simd_abs_4(bitblock128_t arg1)
{
	bitblock128_t gtMask = simd_gt_4(arg1, simd_constant_4(0));
	return simd_ifh_1(gtMask, arg1, simd_sub_4(gtMask, arg1));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_abs_8(bitblock128_t arg1)
{
	return _mm_abs_epi8(arg1);
}
//The total number of operations is 5.0
static inline bitblock128_t simd_abs_64(bitblock128_t arg1)
{
	bitblock128_t gtMask = simd_gt_64(arg1, simd_constant_64(0));
	return simd_ifh_1(gtMask, arg1, simd_sub_64(gtMask, arg1));
}
//The total number of operations is 28.0
static inline bitblock128_t simd_abs_128(bitblock128_t arg1)
{
	bitblock128_t eqMask = simd_eq_128(simd_ifh_1(simd_himask_128(), simd_abs_64(arg1), arg1), arg1);
	return simd_ifh_1(eqMask, arg1, simd_sub_128(eqMask, arg1));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_abs_16(bitblock128_t arg1)
{
	return _mm_abs_epi16(arg1);
}
//The total number of operations is 3.0
static inline bitblock128_t simd_xor_hl_32(bitblock128_t arg1)
{
	return simd_xor(simd_srli_32((16), arg1), simd_and(arg1, simd_lomask_32()));
}
//The total number of operations is 4.0
static inline bitblock128_t simd_xor_hl_2(bitblock128_t arg1)
{
	return simd_xor(simd_srli_2((1), arg1), simd_and(arg1, simd_lomask_2()));
}
//The total number of operations is 4.0
static inline bitblock128_t simd_xor_hl_4(bitblock128_t arg1)
{
	return simd_xor(simd_srli_4((2), arg1), simd_and(arg1, simd_lomask_4()));
}
//The total number of operations is 4.0
static inline bitblock128_t simd_xor_hl_8(bitblock128_t arg1)
{
	return simd_xor(simd_srli_8((4), arg1), simd_and(arg1, simd_lomask_8()));
}
//The total number of operations is 3.0
static inline bitblock128_t simd_xor_hl_64(bitblock128_t arg1)
{
	return simd_xor(simd_srli_64((32), arg1), simd_and(arg1, simd_lomask_64()));
}
//The total number of operations is 4.33333333333
static inline bitblock128_t simd_xor_hl_128(bitblock128_t arg1)
{
	return simd_xor(simd_srli_128((64), arg1), simd_and(arg1, simd_lomask_128()));
}
//The total number of operations is 3.0
static inline bitblock128_t simd_xor_hl_16(bitblock128_t arg1)
{
	return simd_xor(simd_srli_16((8), arg1), simd_and(arg1, simd_lomask_16()));
}
//The total number of operations is 10.0
static inline bitblock128_t simd_srai_4(uint64_t sh, bitblock128_t arg1)
{
	bitblock128_t tmp = simd_srli_4(((sh >= 4) ? (3) : ((sh < 0) ? 0 : sh)), arg1);
	return simd_or(tmp, simd_sub_4(simd_constant_4(0), simd_and(simd_constant_4((1<<((4-((sh >= 4) ? (3) : ((sh < 0) ? 0 : sh)))-1))), tmp)));
}
//The total number of operations is 5.0
static inline bitblock128_t simd_srai_8(uint64_t sh, bitblock128_t arg1)
{
	bitblock128_t tmp = simd_srli_8(((sh >= 8) ? (7) : ((sh < 0) ? 0 : sh)), arg1);
	return simd_or(tmp, simd_sub_8(simd_constant_8(0), simd_and(simd_constant_8((1<<((8-((sh >= 8) ? (7) : ((sh < 0) ? 0 : sh)))-1))), tmp)));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_and(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_and_si128(arg1, arg2);
}
//The total number of operations is 15.0
static inline bitblock128_t mvmd_fill16_1(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4, uint64_t val5, uint64_t val6, uint64_t val7, uint64_t val8, uint64_t val9, uint64_t val10, uint64_t val11, uint64_t val12, uint64_t val13, uint64_t val14, uint64_t val15, uint64_t val16)
{
	return simd_or(mvmd_fill16_2((val1<<1), (val3<<1), (val5<<1), (val7<<1), (val9<<1), (val11<<1), (val13<<1), (val15<<1), (val1<<1), (val3<<1), (val5<<1), (val7<<1), (val9<<1), (val11<<1), (val13<<1), (val15<<1)), mvmd_fill16_2((val2&(1)), (val4&(1)), (val6&(1)), (val8&(1)), (val10&(1)), (val12&(1)), (val14&(1)), (val16&(1)), (val2&(1)), (val4&(1)), (val6&(1)), (val8&(1)), (val10&(1)), (val12&(1)), (val14&(1)), (val16&(1))));
}
//The total number of operations is 7.0
static inline bitblock128_t mvmd_fill16_2(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4, uint64_t val5, uint64_t val6, uint64_t val7, uint64_t val8, uint64_t val9, uint64_t val10, uint64_t val11, uint64_t val12, uint64_t val13, uint64_t val14, uint64_t val15, uint64_t val16)
{
	return simd_or(mvmd_fill16_4((val1<<2), (val3<<2), (val5<<2), (val7<<2), (val9<<2), (val11<<2), (val13<<2), (val15<<2), (val1<<2), (val3<<2), (val5<<2), (val7<<2), (val9<<2), (val11<<2), (val13<<2), (val15<<2)), mvmd_fill16_4((val2&(3)), (val4&(3)), (val6&(3)), (val8&(3)), (val10&(3)), (val12&(3)), (val14&(3)), (val16&(3)), (val2&(3)), (val4&(3)), (val6&(3)), (val8&(3)), (val10&(3)), (val12&(3)), (val14&(3)), (val16&(3))));
}
//The total number of operations is 3.0
static inline bitblock128_t mvmd_fill16_4(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4, uint64_t val5, uint64_t val6, uint64_t val7, uint64_t val8, uint64_t val9, uint64_t val10, uint64_t val11, uint64_t val12, uint64_t val13, uint64_t val14, uint64_t val15, uint64_t val16)
{
	return simd_or(mvmd_fill16_8((val1<<4), (val3<<4), (val5<<4), (val7<<4), (val9<<4), (val11<<4), (val13<<4), (val15<<4), (val1<<4), (val3<<4), (val5<<4), (val7<<4), (val9<<4), (val11<<4), (val13<<4), (val15<<4)), mvmd_fill16_8((val2&(15)), (val4&(15)), (val6&(15)), (val8&(15)), (val10&(15)), (val12&(15)), (val14&(15)), (val16&(15)), (val2&(15)), (val4&(15)), (val6&(15)), (val8&(15)), (val10&(15)), (val12&(15)), (val14&(15)), (val16&(15))));
}
//The total number of operations is 1.0
static inline bitblock128_t mvmd_fill16_8(uint64_t val1, uint64_t val2, uint64_t val3, uint64_t val4, uint64_t val5, uint64_t val6, uint64_t val7, uint64_t val8, uint64_t val9, uint64_t val10, uint64_t val11, uint64_t val12, uint64_t val13, uint64_t val14, uint64_t val15, uint64_t val16)
{
	return _mm_set_epi8((int32_t)(val1), (int32_t)(val2), (int32_t)(val3), (int32_t)(val4), (int32_t)(val5), (int32_t)(val6), (int32_t)(val7), (int32_t)(val8), (int32_t)(val9), (int32_t)(val10), (int32_t)(val11), (int32_t)(val12), (int32_t)(val13), (int32_t)(val14), (int32_t)(val15), (int32_t)(val16));
}
//The total number of operations is 5.0
static inline bitblock128_t simd_lt_32(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_and(simd_not(simd_gt_32(arg1, arg2)), simd_not(simd_eq_32(arg1, arg2)));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_lt_1(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_andc(arg1, arg2);
}
//The total number of operations is 14.6666666667
static inline bitblock128_t simd_lt_2(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t tmp = simd_not(arg2);
	bitblock128_t tmpAns = simd_or(simd_and(arg1, tmp), simd_and(simd_slli_128(1, simd_and(simd_not(arg1), arg2)), simd_or(arg1, tmp)));
	return simd_ifh_1(simd_himask_2(), tmpAns, simd_srli_128(1, tmpAns));
}
//The total number of operations is 18.0
static inline bitblock128_t simd_lt_4(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_ifh_1(simd_himask_8(), simd_lt_8(arg1, simd_and(simd_himask_8(), arg2)), simd_lt_8(simd_slli_8(4, arg1), simd_slli_8(4, arg2)));
}
//The total number of operations is 5.0
static inline bitblock128_t simd_lt_8(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_and(simd_not(simd_gt_8(arg1, arg2)), simd_not(simd_eq_8(arg1, arg2)));
}
//The total number of operations is 5.0
static inline bitblock128_t simd_lt_64(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_and(simd_not(simd_gt_64(arg1, arg2)), simd_not(simd_eq_64(arg1, arg2)));
}
//The total number of operations is 31.75
static inline bitblock128_t simd_lt_128(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t hiAns = simd_lt_64(arg1, arg2);
	bitblock128_t loAns = simd_ult_64(arg1, arg2);
	bitblock128_t mask = simd_and(loAns, simd_srli_128((64), simd_eq_64(arg1, arg2)));
	mask = simd_or(mask, simd_slli_128((64), mask));
	return simd_or(simd_srai_128((64), hiAns), mask);
}
//The total number of operations is 5.0
static inline bitblock128_t simd_lt_16(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_and(simd_not(simd_gt_16(arg1, arg2)), simd_not(simd_eq_16(arg1, arg2)));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_add_32(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_add_epi32(arg1, arg2);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_add_1(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_xor(arg1, arg2);
}
//The total number of operations is 8.33333333333
static inline bitblock128_t simd_add_2(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t tmp = simd_xor(arg1, arg2);
	return simd_ifh_1(simd_himask_2(), simd_xor(tmp, simd_slli_128(1, simd_and(arg1, arg2))), tmp);
}
//The total number of operations is 6.0
static inline bitblock128_t simd_add_4(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_ifh_1(simd_himask_8(), simd_add_8(arg1, simd_and(simd_himask_8(), arg2)), simd_add_8(arg1, arg2));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_add_8(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_add_epi8(arg1, arg2);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_add_64(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_add_epi64(arg1, arg2);
}
//The total number of operations is 9.33333333333
static inline bitblock128_t simd_add_128(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t partial = simd_add_64(arg1, arg2);
	bitblock128_t carryMask = simd_or(simd_and(arg1, arg2), simd_andc(simd_xor(arg1, arg2), partial));
	bitblock128_t carry = simd_slli_128((64), simd_srli_64((63), carryMask));
	return simd_add_64(partial, carry);
}
//The total number of operations is 1.0
static inline bitblock128_t simd_add_16(bitblock128_t arg1, bitblock128_t arg2)
{
	return _mm_add_epi16(arg1, arg2);
}
//The total number of operations is 3.0
static inline bitblock128_t simd_ugt_32(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t high_bit = simd_constant_32((2147483648ULL));
	return simd_gt_32(simd_xor(arg1, high_bit), simd_xor(arg2, high_bit));
}
//The total number of operations is 1.0
static inline bitblock128_t simd_ugt_1(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_andc(arg1, arg2);
}
//The total number of operations is 13.6666666667
static inline bitblock128_t simd_ugt_2(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t tmp = simd_not(arg2);
	bitblock128_t tmpAns = simd_or(simd_and(arg1, tmp), simd_and(simd_slli_128(1, simd_and(arg1, tmp)), simd_or(arg1, tmp)));
	return simd_ifh_1(simd_himask_2(), tmpAns, simd_srli_128(1, tmpAns));
}
//The total number of operations is 12.0
static inline bitblock128_t simd_ugt_4(bitblock128_t arg1, bitblock128_t arg2)
{
	return simd_ifh_1(simd_himask_8(), simd_ugt_8(simd_and(simd_himask_8(), arg1), arg2), simd_ugt_8(simd_andc(arg1, simd_himask_8()), simd_andc(arg2, simd_himask_8())));
}
//The total number of operations is 3.0
static inline bitblock128_t simd_ugt_8(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t high_bit = simd_constant_8((128));
	return simd_gt_8(simd_xor(arg1, high_bit), simd_xor(arg2, high_bit));
}
//The total number of operations is 3.0
static inline bitblock128_t simd_ugt_64(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t high_bit = simd_constant_64((9223372036854775808ULL));
	return simd_gt_64(simd_xor(arg1, high_bit), simd_xor(arg2, high_bit));
}
//The total number of operations is 22.75
static inline bitblock128_t simd_ugt_128(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t tmpAns = simd_ugt_64(arg1, arg2);
	bitblock128_t mask = simd_and(tmpAns, simd_srli_128((64), simd_eq_64(arg1, arg2)));
	mask = simd_or(mask, simd_slli_128((64), mask));
	return simd_or(simd_srai_128((64), tmpAns), mask);
}
//The total number of operations is 3.0
static inline bitblock128_t simd_ugt_16(bitblock128_t arg1, bitblock128_t arg2)
{
	bitblock128_t high_bit = simd_constant_16((32768));
	return simd_gt_16(simd_xor(arg1, high_bit), simd_xor(arg2, high_bit));
}
#endif
